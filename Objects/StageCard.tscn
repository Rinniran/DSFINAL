[gd_scene load_steps=16 format=2]

[ext_resource path="res://Subrooms/Stageemblem.tscn" type="PackedScene" id=1]
[ext_resource path="res://Subrooms/SCardBannerPink.tscn" type="PackedScene" id=2]
[ext_resource path="res://Subrooms/SCardBannerBlue.tscn" type="PackedScene" id=3]
[ext_resource path="res://Sprites/Stage/SCity/FGwaver.png" type="Texture" id=4]
[ext_resource path="res://Stages/Diemeter.gd" type="Script" id=5]
[ext_resource path="res://Sprites/Misc/screenblack.png" type="Texture" id=6]
[ext_resource path="res://Sprites/gui/SCTitCard.png" type="Texture" id=7]
[ext_resource path="res://Sprites/gui/Stagecard Frame.png" type="Texture" id=8]

[sub_resource type="Animation" id=135]
resource_name = "Fadein"
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ) ]
}

[sub_resource type="Animation" id=136]
resource_name = "Fadeout"
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ), Color( 0, 0, 0, 1 ) ]
}

[sub_resource type="Animation" id=137]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Shader" id=132]
code = "// NOTE: Shader automatically converted from Godot Engine 3.4.2.stable's CanvasItemMaterial.



/*
	ボロノイ神経風 背景シェーダー by あるる（きのもと 結衣） @arlez80
	Voronoi Synapse-ish Background Shader by Yui Kinomoto @arlez80

	MIT License
*/
shader_type canvas_item;
render_mode blend_add;

uniform vec2 pixel_size = vec2( 0.001, 0.001 );

uniform float voronoi_scale = 20.0;
uniform float voronoi_seed = 0.0;

uniform float electric_scale = 20.0;
uniform float electric_speed = 1.0;
uniform float electric_power = 3.0;

vec2 random( vec2 pos )
{ 
	return fract(
		sin(
			vec2(
				dot(pos, vec2(12.9898,78.233))
			,	dot(pos, vec2(-148.998,-65.233))
			)
		) * 43758.5453
	);
}

vec2 voronoi( vec2 uv )
{
	vec2 v = uv * voronoi_scale + vec2( voronoi_seed, voronoi_seed );
	vec2 v_floor = floor( v );
	vec2 v_fract = fract( v );
	vec2 min_p = vec2( 0.0, 0.0 );
	float min_dist = 2.0;

	for( int y = -1; y <= 1; y ++ ) {
		for( int x = -1; x <= 1; x ++ ) {
			vec2 n = vec2( float( x ), float( y ) );
			vec2 p = random( v_floor + n );
			vec2 diff = p + n;
			float d = distance( v_fract, diff );

			min_p = mix( min_p, ( v + diff - v_fract ) / voronoi_scale, float( d < min_dist ) );
			min_dist = min( min_dist, d );
		}
	}

	return min_p;
}

vec2 sobel_coord_conv( vec2 v, int x, int y )
{
	return v + vec2( float( x-1 ), float( y-1 ) ) * pixel_size;
}

float sobel( vec2 uv )
{
	vec2 sobel[9] = {
		voronoi( sobel_coord_conv( uv, 0, 0 ) )
	,	voronoi( sobel_coord_conv( uv, 1, 0 ) )
	,	voronoi( sobel_coord_conv( uv, 2, 0 ) )
	,	voronoi( sobel_coord_conv( uv, 0, 1 ) )
	,	vec2( 0.0 )	// 未使用
	,	voronoi( sobel_coord_conv( uv, 2, 1 ) )
	,	voronoi( sobel_coord_conv( uv, 0, 2 ) )
	,	voronoi( sobel_coord_conv( uv, 1, 2 ) )
	,	voronoi( sobel_coord_conv( uv, 2, 2 ) )
	};
	vec2 sobel_src_x = (
		sobel[0] * -1.0
	+	sobel[3] * -2.0
	+	sobel[6] * -1.0
	+	sobel[2] * 1.0
	+	sobel[5] * 2.0
	+	sobel[8] * 1.0
	);
	vec2 sobel_src_y = (
		sobel[0] * -1.0
	+	sobel[1] * -2.0
	+	sobel[2] * -1.0
	+	sobel[6] * 1.0
	+	sobel[7] * 2.0
	+	sobel[8] * 1.0
	);

	return length( sqrt( sobel_src_x * sobel_src_x + sobel_src_y * sobel_src_y ) );
}

float electric( vec2 uv )
{
	return clamp( sobel( uv ) * mod( ( uv.x - uv.y ) * electric_scale / 3.0 - TIME * electric_speed, 1.0 ) * electric_power, 0.0, 1.0 );
}

void fragment( )
{
	COLOR = vec4( vec3( electric( UV + TIME * 0.1 ), electric( UV * 0.5 + TIME * 0.1 ), electric( UV * 0.25 + TIME * 0.1 ) ), 1.0);
}
"

[sub_resource type="ShaderMaterial" id=138]
shader = SubResource( 132 )
shader_param/pixel_size = Vector2( 0.001, 0.001 )
shader_param/voronoi_scale = 20.0
shader_param/voronoi_seed = 0.0
shader_param/electric_scale = 20.0
shader_param/electric_speed = 1.0
shader_param/electric_power = 3.0

[sub_resource type="Shader" id=134]
code = "/*
	Glitch Effect Shader by Yui Kinomoto @arlez80

	MIT License
*/

shader_type canvas_item;

// 振動の強さ
uniform float shake_power = 0.03;
// 振動率
uniform float shake_rate : hint_range( 0.0, 1.0 ) = 0.2;
// 振動速度
uniform float shake_speed = 5.0;
// 振動ブロックサイズ
uniform float shake_block_size = 30.5;
// 色の分離率
uniform float shake_color_rate : hint_range( 0.0, 1.0 ) = 0.01;

float random( float seed )
{
	return fract( 543.2543 * sin( dot( vec2( seed, seed ), vec2( 3525.46, -54.3415 ) ) ) );
}

void fragment( )
{
	float enable_shift = float(
		random( trunc( TIME * shake_speed ) )
	<	shake_rate
	);

	vec2 fixed_uv = SCREEN_UV;
	fixed_uv.x += (
		random(
			( trunc( SCREEN_UV.y * shake_block_size ) / shake_block_size )
		+	TIME
		) - 0.5
	) * shake_power * enable_shift;

	vec4 pixel_color = textureLod( SCREEN_TEXTURE, fixed_uv, 0.0 );
	pixel_color.r = mix(
		pixel_color.r
	,	textureLod( SCREEN_TEXTURE, fixed_uv + vec2( shake_color_rate, 0.0 ), 0.0 ).r
	,	enable_shift
	);
	pixel_color.b = mix(
		pixel_color.b
	,	textureLod( SCREEN_TEXTURE, fixed_uv + vec2( -shake_color_rate, 0.0 ), 0.0 ).b
	,	enable_shift
	);
	COLOR = pixel_color;
}"

[sub_resource type="ShaderMaterial" id=139]
shader = SubResource( 134 )
shader_param/shake_power = 0.03
shader_param/shake_rate = 0.2
shader_param/shake_speed = 5.0
shader_param/shake_block_size = 30.5
shader_param/shake_color_rate = 0.01

[node name="STGCARD" type="CanvasLayer"]
layer = 30

[node name="Stagetitle" type="Sprite" parent="."]
position = Vector2( 479.141, 287.347 )
scale = Vector2( 1.99101, 1.99101 )
z_index = -2
texture = ExtResource( 7 )

[node name="StageCard" type="Sprite" parent="."]
visible = false
modulate = Color( 1, 1, 1, 0 )
position = Vector2( 479.141, 287.347 )
scale = Vector2( 1.99101, 1.99101 )
texture = ExtResource( 8 )

[node name="screenspr" type="Sprite" parent="."]
position = Vector2( 481.489, 288.579 )
scale = Vector2( 1.62608, 1.03644 )
texture = ExtResource( 6 )

[node name="Blackscreen" type="AnimationPlayer" parent="screenspr"]
playback_process_mode = 0
anims/Fadein = SubResource( 135 )
anims/Fadeout = SubResource( 136 )
anims/RESET = SubResource( 137 )

[node name="ColorRect" type="Sprite" parent="."]
visible = false
material = SubResource( 138 )
position = Vector2( 479.568, 288.254 )
scale = Vector2( 1.50135, 1.60141 )
z_index = 2
texture = ExtResource( 4 )
script = ExtResource( 5 )

[node name="ColorRect2" type="Sprite" parent="."]
visible = false
material = SubResource( 139 )
position = Vector2( 479.568, 288.254 )
scale = Vector2( 1.50135, 1.60141 )
z_index = 2
texture = ExtResource( 4 )
script = ExtResource( 5 )

[node name="Sprite" parent="." instance=ExtResource( 1 )]
position = Vector2( 88.0994, 507.239 )
z_index = -2

[node name="BannerBlue" parent="." instance=ExtResource( 3 )]
position = Vector2( 460.893, 456.083 )
rotation = 0.0
z_index = -3

[node name="BannerPink" parent="." instance=ExtResource( 2 )]
position = Vector2( 133.108, 298.888 )
rotation = -1.5708
z_index = -3
