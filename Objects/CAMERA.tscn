[gd_scene load_steps=8 format=2]

[ext_resource path="res://Objects/HUD.tscn" type="PackedScene" id=3]

[sub_resource type="ShaderMaterial" id=3]

[sub_resource type="GDScript" id=1]
script/source = "extends Camera2D


onready var shakeTimer = $Timer
onready var tween = $Tween

var shake_amount = 0
var default_offset = offset

export var target : NodePath

export var HudVisible = true

var gonowmyson
var focusx = 3

func _ready():
	
	gonowmyson = get_node(target)
	
	
	
	if current:
		Globals.camera = self
	set_process(false)


func _physics_process(delta):
	
	
	$GUIStuff.visible = HudVisible
	
	if current:
		
		Globals.camera = self
	offset = Vector2(rand_range(-shake_amount, shake_amount), rand_range(-shake_amount, shake_amount)) * delta + default_offset
	#print_debug(str(\"Cam Pos: \") + str(position))
	if target != null:
		gonowmyson = get_node(target)
	if gonowmyson:
		if Globals.playerspriteflip == false:
			if focusx < 2.5:
				focusx += 0.025
		elif Globals.playerspriteflip == true:
			if focusx > 1.5:
				focusx -= 0.025
		
		if Globals.windowmode == 1:
			position.x = gonowmyson.global_position.x - (384 / focusx) * zoom.x
			if position.y > gonowmyson.global_position.y - (180/ 1.8) * zoom.y:
				position.y = gonowmyson.global_position.y - (180/ 1.8) * zoom.y
			elif position.y < gonowmyson.global_position.y - (290/ 1.8) * zoom.y:
				position.y = gonowmyson.global_position.y - (290/ 1.8) * zoom.y
		
		if Globals.windowmode == 0:
			position.x = gonowmyson.global_position.x - (320 / focusx) * zoom.x
			if position.y > gonowmyson.global_position.y - (180/ 1.8) * zoom.y:
				position.y = gonowmyson.global_position.y - (180/ 1.8) * zoom.y
			elif position.y < gonowmyson.global_position.y - (290/ 1.8) * zoom.y:
				position.y = gonowmyson.global_position.y - (290/ 1.8) * zoom.y
		
	if Globals.windowmode == 1:
		position.x = clamp(position.x, 0, limit_right - 384)
	if Globals.windowmode == 0:
		position.x = clamp(position.x, 0, limit_right - 320)


func shake(new_shake, shake_time=0.4, shake_limit=100):
	shake_amount += new_shake
	if shake_amount > shake_limit:
		shake_amount = shake_limit
	
	$Timer.wait_time = shake_time
	
	tween.stop_all()
	set_process(true)
	$Timer.start()


func _on_Timer_timeout():
	
	shake_amount = 0
	set_process(false)
	
	tween.interpolate_property(self, \"offset\", offset, default_offset,
	0.1, Tween.TRANS_QUAD, Tween.EASE_IN_OUT)
	tween.start()
"

[sub_resource type="Shader" id=21]
code = "shader_type canvas_item;

void vertex() {
    // This function is necessary even if empty
}

void fragment() {
    // Get the original color using SCREEN_TEXTURE instead of TEXTURE
    vec4 original_color = texture(SCREEN_TEXTURE, SCREEN_UV);

    // Scale the RGB values to fit within the 5-bit range
    vec3 scaled_color = floor(original_color.rgb * 31.0) / 31.0;

    // Create the final color
    vec4 final_color = vec4(scaled_color, original_color.a);

    // Output the final color
    COLOR = final_color;
}
"

[sub_resource type="ShaderMaterial" id=19]
shader = SubResource( 21 )

[sub_resource type="Shader" id=22]
code = "/*
	CRT shader for Godot Engine by Yui Kinomoto @arlez80
*/
shader_type canvas_item;

const float PI = 3.1415926535;

// ブラウン管のガラスの曲がり具合（フラットなやつは0.0でいいかな）
uniform float crt_curve : hint_range( 0.0, 1.0 ) = 0.02;
// 走査線の濃さ
uniform float crt_scan_line_color : hint_range( 0.0, 1.0 ) = 0.347;
// 光量
uniform float aperture_grille_rate : hint_range( 0.0, 1.0 ) = 0.4;
// RFスイッチ的ブラー
uniform float rf_switch_esque_blur : hint_range( 0.0, 1.0 ) = 1.0;
// 白色ノイズ
uniform float white_noise_rate : hint_range( 0.0, 1.0 ) = 0.0;

float random( vec2 pos )
{ 
	return fract(sin(dot(pos, vec2(12.9898,78.233))) * 43758.5453);
}

void fragment( )
{
	// ガラスの曲がり具合
	vec2 crt_curve_shift = ( vec2( 1.0, 1.0 ) - sin( UV.yx * PI ) ) * crt_curve;
	vec2 crt_curve_scale = vec2( 1.0, 1.0 ) + crt_curve_shift * 2.0;
	vec2 texture_fixed_uv = UV * crt_curve_scale - crt_curve_shift;
	vec2 fixed_uv = SCREEN_UV * crt_curve_scale - crt_curve_shift;
	// 範囲外を消す
	float enable_color = float( 0.0 <= texture_fixed_uv.x && texture_fixed_uv.x <= 1.0 && 0.0 <= texture_fixed_uv.y && texture_fixed_uv.y <= 1.0 );

	// ガラスの曲がり具合から元色を取得 + RFスイッチ的ブラー
	COLOR.rgb = (
		(
			texture( SCREEN_TEXTURE, fixed_uv ).rgb
		*	( 1.0 - rf_switch_esque_blur * 0.5 )
		)
	+	(
			(
				texture( SCREEN_TEXTURE, fixed_uv + vec2( -SCREEN_PIXEL_SIZE.x * 3.1, 0.0 ) ).rgb
			+	texture( SCREEN_TEXTURE, fixed_uv + vec2( SCREEN_PIXEL_SIZE.x * 3.1, 0.0 ) ).rgb
			)
			*	( rf_switch_esque_blur * 0.25 )	// （RFノイズ）0.5 * （テクスチャから読んだ2箇所を半分にしたい）0.5
		)
	) * enable_color;
	COLOR.a = 1.0;

	// ------------------------------------------------
	// 以下はアパーチャグリル上の1ピクセルごとの処理
	vec2 aperture_grille_pixel = vec2( floor( ( fixed_uv.x / SCREEN_PIXEL_SIZE.x ) / 3.0 ) * 3.0, fixed_uv.y );

	// 白色ノイズ
	float white_noise = random( aperture_grille_pixel + vec2( sin( TIME * 0.543254 ), cos( TIME * 0.254323563 ) ) );
	COLOR.rgb = mix(
		COLOR.rgb
	,	vec3( white_noise, white_noise, white_noise )
	,	white_noise_rate * enable_color
	);

	// アパーチャグリル再現
	float aperture_grille_point = mod( ( ( SCREEN_UV.x * crt_curve_scale.x ) - crt_curve_shift.x ) / SCREEN_PIXEL_SIZE.x, 3.0 );
	float aperture_grille_r_rate = clamp( 1.0 - aperture_grille_point, 0.0, 1.0 ) + clamp( aperture_grille_point - 2.0, 0.0, 1.0 );
	float aperture_grille_g_rate = clamp( 1.0 - abs( 1.0 - aperture_grille_point ), 0.0, 1.0 );
	float aperture_grille_b_rate = 1.0 - aperture_grille_r_rate - aperture_grille_g_rate;
	COLOR = clamp(
		COLOR * vec4(
			normalize( vec3(
				clamp( aperture_grille_r_rate, aperture_grille_rate, 1.0 )
			,	clamp( aperture_grille_g_rate, aperture_grille_rate, 1.0 )
			,	clamp( aperture_grille_b_rate, aperture_grille_rate, 1.0 )
			) )
		,	1.0
		)
	,	vec4( 0.0, 0.0, 0.0, 0.0 )
	,	vec4( 1.0, 1.0, 1.0, 1.0 )
	);

	// 走査線
	COLOR = mix(
		COLOR
	,	vec4( 0.0, 0.0, 0.0, 1.0 )
	,	float( 0 == int( fixed_uv.y / SCREEN_PIXEL_SIZE.y ) % 2 ) * crt_scan_line_color
	);
}
"

[sub_resource type="ShaderMaterial" id=23]
shader = SubResource( 22 )
shader_param/crt_curve = 0.0
shader_param/crt_scan_line_color = 0.206
shader_param/aperture_grille_rate = 0.119
shader_param/rf_switch_esque_blur = 0.876
shader_param/white_noise_rate = 0.0

[node name="Camera2D" type="Camera2D"]
material = SubResource( 3 )
anchor_mode = 0
current = true
limit_left = 0
limit_top = 0
limit_right = 1536
limit_bottom = 1296
drag_margin_h_enabled = true
drag_margin_v_enabled = true
smoothing_speed = 20.0
offset_h = -1.0
drag_margin_left = 0.44
drag_margin_top = 1.0
drag_margin_right = 0.54
drag_margin_bottom = 0.0
editor_draw_limits = true
editor_draw_drag_margin = true
script = SubResource( 1 )

[node name="Timer" type="Timer" parent="."]
process_mode = 0
one_shot = true
autostart = true

[node name="Tween" type="Tween" parent="."]

[node name="CanvasLayer" type="CanvasLayer" parent="."]
layer = 128

[node name="ColorRect" type="ColorRect" parent="CanvasLayer"]
material = SubResource( 19 )
margin_right = 496.0
margin_bottom = 224.0

[node name="ColorRect2" type="ColorRect" parent="CanvasLayer"]
visible = false
material = SubResource( 23 )
margin_right = 384.0
margin_bottom = 225.0
rect_pivot_offset = Vector2( 173, 289 )

[node name="GUIStuff" parent="." instance=ExtResource( 3 )]

[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]
