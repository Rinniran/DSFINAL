[gd_scene load_steps=33 format=2]

[ext_resource path="res://Stages/Titlescreen.gd" type="Script" id=1]
[ext_resource path="res://Sprites/Misc/Dreamshock Logo.png" type="Texture" id=2]
[ext_resource path="res://meshes/TITCYL/title cylinder.obj" type="ArrayMesh" id=3]
[ext_resource path="res://Sprites/Textures/scityfogeffect.png" type="Texture" id=4]
[ext_resource path="res://Stages/title cylinder.gd" type="Script" id=5]
[ext_resource path="res://Audio/BGM/Outlandish City Under the Night Sky ~ Stick City.mp3" type="AudioStream" id=6]
[ext_resource path="res://TextMain.tres" type="Theme" id=7]
[ext_resource path="res://Sprites/Misc/SAGE2023ALTPIXELART.PNG" type="Texture" id=8]
[ext_resource path="res://Audio/SE/Start.wav" type="AudioStream" id=9]
[ext_resource path="res://Sprites/Textures/LOADING.png" type="Texture" id=10]
[ext_resource path="res://Sprites/Stage/SCity/FGwaver.png" type="Texture" id=11]
[ext_resource path="res://Subrooms/SESC.gd" type="Script" id=12]
[ext_resource path="res://Objects/CAMERA.tscn" type="PackedScene" id=13]

[sub_resource type="SpatialMaterial" id=17]
flags_unshaded = true
params_diffuse_mode = 1
params_specular_mode = 1
params_cull_mode = 2
params_line_width = 0.1
albedo_color = Color( 0.321569, 0.305882, 0.878431, 1 )
albedo_texture = ExtResource( 4 )

[sub_resource type="SpatialMaterial" id=18]
flags_unshaded = true
params_cull_mode = 2
albedo_color = Color( 0.321569, 0.305882, 0.878431, 1 )
albedo_texture = ExtResource( 4 )

[sub_resource type="Environment" id=2]

[sub_resource type="Animation" id=3]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=4]
resource_name = "alph"
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.6, 1 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=19]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=20]
resource_name = "alph"
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.6, 1 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=5]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=6]
resource_name = "alph"
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.6, 1 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=7]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=8]
resource_name = "alph"
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.6, 1 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=9]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=10]
resource_name = "alph"
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.6, 1 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Shader" id=11]
code = "/*
	ギザギザトランジションシェーダー by あるる（きのもと 結衣）
	Saw Transition Shader by KINOMOTO Yui

	MIT License
*/
shader_type canvas_item;

uniform float saw_b_shift = -0.267;
uniform float saw_a_interval = 1.0;
uniform float saw_b_interval = 2.0;
uniform float saw_a_scale = 1.0;
uniform float saw_b_scale = 0.821;

uniform vec2 uv_scale = vec2( 3.0, 8.0 );
uniform sampler2D tex : hint_albedo;
uniform vec4 color : hint_color = vec4( 0.0, 0.0, 0.0, 1.0 );

uniform float right = 0.0;
uniform float left = -1.0;

float calc_saw( float y, float interval, float scale )
{
	return max( ( abs( interval / 2.0 - mod( y, interval ) ) - ( interval / 2.0 - 0.5 ) ) * scale, 0.0 );
}

void fragment( )
{
	vec2 scaled_uv = UV * uv_scale;
	float saw_a = calc_saw( scaled_uv.y, saw_a_interval, saw_a_scale );
	float saw_b = calc_saw( scaled_uv.y + saw_b_shift, saw_b_interval, saw_b_scale );

	vec4 texture_pixel = texture( tex, UV );

	COLOR = vec4(
		color.rgb * texture_pixel.rgb
	,	color.a * texture_pixel.a
		* float( scaled_uv.x < max( saw_a, saw_b ) + right )
		* float( max( saw_a, saw_b ) + left < scaled_uv.x )
	);
}"

[sub_resource type="ShaderMaterial" id=12]
shader = SubResource( 11 )
shader_param/saw_b_shift = -0.267
shader_param/saw_a_interval = 0.687
shader_param/saw_b_interval = 2.0
shader_param/saw_a_scale = 1.974
shader_param/saw_b_scale = 0.821
shader_param/uv_scale = Vector2( 3, 8 )
shader_param/color = Color( 1, 1, 1, 1 )
shader_param/right = -1.012
shader_param/left = -1.0
shader_param/tex = ExtResource( 10 )

[sub_resource type="Animation" id=13]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath(".:material:shader_param/right")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ -1.012 ]
}

[sub_resource type="Animation" id=14]
length = 2.0
tracks/0/type = "value"
tracks/0/path = NodePath(".:material:shader_param/right")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.6 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ -1.012, 2.913 ]
}

[sub_resource type="Shader" id=15]
code = "//SHADER ORIGINALY CREADED BY \"TimothyLottes\" FROM SHADERTOY
//PORTED AND MODIFYED TO GODOT BY AHOPNESS (@ahopness)
//LICENSE : CC0
//COMATIBLE WITH : GLES2, GLES3, WEBGL
//SHADERTOY LINK : https://www.shadertoy.com/view/MsjXzh

// PUBLIC DOMAIN CRT STYLED SCAN-LINE SHADER
//
//   by Timothy Lottes
//
// This is more along the style of a really good CGA arcade monitor.
// With RGB inputs instead of NTSC.
// The shadow mask example has the mask rotated 90 degrees for less chromatic aberration.
//
// Left it unoptimized to show the theory behind the algorithm.
//
// It is an example what I personally would want as a display option for pixel art games.
// Please take and use, change, or whatever.

shader_type canvas_item;

// Emulated input resolution.
uniform vec2 res;

// Mask type
//  0 = Very compressed TV style shadow mask
//  1 = Stretched VGA style shadow mask (same as prior shaders)
//  2 = VGA style shadow mask 
uniform int mask_type :hint_range(0, 2) = 0;

// Bloom Type
//  0 = Normalized exposure
//  1 = Aditive bloom
//  2 = No Bloom
uniform int bloom_type :hint_range(0, 2) = 0;

// Hardness of scanline.
//  -8.0 = soft
// -16.0 = medium
uniform float hardScan :hint_range(-12.0, -1.0) = -8.0;

// Hardness of pixels in scanline.
// -2.0 = soft
// -4.0 = hard
uniform float hardPix :hint_range(-4.0, 0.0) = -2.0;

// Hardness of short vertical bloom.
//  -1.0 = wide to the point of clipping (bad)
//  -1.5 = wide
//  -4.0 = not very wide at all
uniform float hardBloomScan :hint_range(-4.0, 0.0) = -2.0;

// Hardness of short horizontal bloom.
//  -0.5 = wide to the point of clipping (bad)
//  -1.0 = wide
//  -2.0 = not very wide at all
uniform float hardBloomPix :hint_range(-2.0, 0.0) = -1.5;

// Amount of small bloom effect.
//  1.0/1.0 = only bloom
//  1.0/16.0 = what I think is a good amount of small bloom
//  0.0     = no bloom
uniform float bloomAmount :hint_range(1.0, 16.0) = 16.0;

// Display warp.
// 0.0 = none
// 1.0/8.0 = extreme
uniform vec2 warp = vec2(64.0, 24.0); 

// Amount of shadow mask.
uniform float maskDark  :hint_range(0.0, 1.0) = 0.5;
uniform float maskLight :hint_range(1.0, 2.0) = 1.5;

//------------------------------------------------------------------------

// sRGB to Linear.
// Assuing using sRGB typed textures this should not be needed.
float ToLinear1(float c){ return(c <= 0.04045) ? c / 12.92 : pow((c + 0.055) / 1.055, 2.4); }
vec3 ToLinear(vec3 c){ return vec3(ToLinear1(c.r), ToLinear1(c.g), ToLinear1(c.b)); }

// Linear to sRGB.
// Assuing using sRGB typed textures this should not be needed.
float ToSrgb1(float c){ return(c < 0.0031308?c * 12.92 : 1.055 * pow(c, 0.41666) - 0.055); }
vec3 ToSrgb(vec3 c){ return vec3(ToSrgb1(c.r), ToSrgb1(c.g), ToSrgb1(c.b)); }

// Nearest emulated sample given floating point position and texel offset.
// Also zero's off screen.
vec3 Fetch(vec2 pos, vec2 off, sampler2D iChannel0){
	pos = floor(pos * res + off) / res;
	
	if(max(abs(pos.x - 0.5), abs(pos.y - 0.5)) > 0.5){
		return vec3(0.0, 0.0, 0.0);
	}
	
	return ToLinear(texture(iChannel0 , pos.xy , -16.0).rgb);
}

// Distance in emulated pixels to nearest texel.
vec2 Dist(vec2 pos){ 
	pos = pos * res; 
	return - ((pos - floor(pos)) - vec2(0.5));
}
    
// 1D Gaussian.
float Gaus(float pos, float scale){ return exp2(scale * pos * pos); }

// 3-tap Gaussian filter along horz line.
vec3 Horz3(vec2 pos, float off, sampler2D iChannel0){
	vec3 b = Fetch(pos, vec2(-1.0, off), iChannel0);
	vec3 c = Fetch(pos, vec2( 0.0, off), iChannel0);
	vec3 d = Fetch(pos, vec2( 1.0, off), iChannel0);
	float dst = Dist(pos).x;
	
	// Convert distance to weight.
	float scale = hardPix;
	float wb = Gaus(dst - 1.0, scale);
	float wc = Gaus(dst + 0.0, scale);
	float wd = Gaus(dst + 1.0, scale);
	
	// Return filtered sample.
	return (b * wb + c * wc + d * wd) / (wb + wc + wd);
}
// 5-tap Gaussian filter along horz line.
vec3 Horz5(vec2 pos, float off, sampler2D iChannel0){
	vec3 a = Fetch(pos, vec2(-2.0, off), iChannel0);
	vec3 b = Fetch(pos, vec2(-1.0, off), iChannel0);
	vec3 c = Fetch(pos, vec2( 0.0, off), iChannel0);
	vec3 d = Fetch(pos, vec2( 1.0, off), iChannel0);
	vec3 e = Fetch(pos, vec2( 2.0, off), iChannel0);
	float dst = Dist(pos).x;
	
	// Convert distance to weight.
	float scale = hardPix;
	float wa = Gaus(dst - 2.0, scale);
	float wb = Gaus(dst - 1.0, scale);
	float wc = Gaus(dst + 0.0, scale);
	float wd = Gaus(dst + 1.0, scale);
	float we = Gaus(dst + 2.0, scale);
	
	// Return filtered sample.
	return (a * wa + b * wb + c * wc + d * wd + e * we) / (wa + wb + wc + wd + we);
}
// 7-tap Gaussian filter along horz line.
vec3 Horz7(vec2 pos, float off, sampler2D iChannel0){
	vec3 a = Fetch(pos, vec2(-3.0, off), iChannel0);
	vec3 b = Fetch(pos, vec2(-2.0, off), iChannel0);
	vec3 c = Fetch(pos, vec2( 1.0, off), iChannel0);
	vec3 d = Fetch(pos, vec2( 0.0, off), iChannel0);
	vec3 e = Fetch(pos, vec2( 1.0, off), iChannel0);
	vec3 f = Fetch(pos, vec2( 2.0, off), iChannel0);
	vec3 g = Fetch(pos, vec2( 3.0, off), iChannel0);
	float dst = Dist(pos).x;
	
	// Convert distance to weight.
	float scale = hardBloomPix;
	float wa = Gaus(dst - 3.0, scale);
	float wb = Gaus(dst - 2.0, scale);
	float wc = Gaus(dst - 1.0, scale);
	float wd = Gaus(dst + 0.0, scale);
	float we = Gaus(dst + 1.0, scale);
	float wf = Gaus(dst + 2.0, scale);
	float wg = Gaus(dst + 3.0, scale);
	
	// Return filtered sample.
	return (a * wa + b * wb + c * wc + d * wd + e * we + f * wf + g * wg) / (wa + wb + wc + wd + we + wf + wg);
}

// Return scanline weight.
float Scan(vec2 pos, float off){
	float dst = Dist(pos).y;
	
	return Gaus(dst + off, hardScan);
}

// Return scanline weight for bloom.
float BloomScan(vec2 pos, float off){
	float dst = Dist(pos).y;
	
	return Gaus(dst + off, hardBloomScan);
}

// Allow nearest three lines to effect pixel.
vec3 Tri(vec2 pos, sampler2D iChannel0){
	vec3 a = Horz3(pos,-1.0, iChannel0);
	vec3 b = Horz5(pos, 0.0, iChannel0);
	vec3 c = Horz3(pos, 1.0, iChannel0);
	
	float wa = Scan(pos,-1.0);
	float wb = Scan(pos, 0.0);
	float wc = Scan(pos, 1.0);
	
	return a * wa + b * wb + c * wc;
}

// Small bloom.
vec3 Bloom(vec2 pos, sampler2D iChannel0){
	vec3 a = Horz5(pos,-2.0, iChannel0);
	vec3 b = Horz7(pos,-1.0, iChannel0);
	vec3 c = Horz7(pos, 0.0, iChannel0);
	vec3 d = Horz7(pos, 1.0, iChannel0);
	vec3 e = Horz5(pos, 2.0, iChannel0);
	
	float wa = BloomScan(pos,-2.0);
	float wb = BloomScan(pos,-1.0);
	float wc = BloomScan(pos, 0.0);
	float wd = BloomScan(pos, 1.0);
	float we = BloomScan(pos, 2.0);
	
	return a * wa + b * wb + c * wc + d * wd + e * we;
}

// Distortion of scanlines, and end of screen alpha.
vec2 Warp(vec2 pos){
	pos = pos * 2.0 - 1.0;    
	pos *= vec2(1.0 + (pos.y * pos.y) * 1.0 / warp.x, 1.0 + (pos.x * pos.x) * 1.0/ warp.y);
	
	return pos * 0.5+0.5;
}

vec3 Mask(vec2 pos){
	if (mask_type == 0){
		float line = maskLight;
		float odd = 0.0;
		
		if(fract(pos.x / 6.0) < 0.5) odd = 1.0;
		if(fract((pos.y + odd) / 2.0) < 0.5) line = maskDark;  
		pos.x = fract(pos.x / 3.0);
		
		vec3 mask = vec3(maskDark, maskDark, maskDark);
		if(pos.x < 0.333)mask.r = maskLight;
		else if(pos.x < 0.666)mask.g = maskLight;
		else mask.b = maskLight;
		
		mask *= line;
		return mask;
	}else if (mask_type == 1){
		pos.x += pos.y * 3.0;
		
		vec3 mask = vec3(maskDark, maskDark, maskDark);
		pos.x = fract(pos.x / 6.0);
		if(pos.x < 0.333)mask.r = maskLight;
		else if(pos.x < 0.666)mask.g = maskLight;
		else mask.b = maskLight;
		
		return mask;
	}else if (mask_type == 2){
		pos.xy = floor(pos.xy * vec2(1.0, 0.5));
		pos.x += pos.y * 3.0;
		
		vec3 mask = vec3(maskDark, maskDark, maskDark);
		pos.x = fract(pos.x / 6.0);
		if(pos.x < 0.333)mask.r = maskLight;
		else if(pos.x < 0.666)mask.g = maskLight;
		else mask.b = maskLight;
	
		return mask;
	}
  }    

// Draw dividing bars.
float Bar(float pos, float bar){ pos -= bar; return pos * pos < 4.0 ? 0.0 : 1.0; }

// Entry.
void fragment(){
	vec2 pos = Warp(FRAGCOORD.xy / (1.0 / SCREEN_PIXEL_SIZE).xy);
	
	COLOR.rgb = Tri(pos, SCREEN_TEXTURE) * Mask(FRAGCOORD.xy);
	if (bloom_type == 0){ 
		COLOR.rgb = mix(COLOR.rgb,Bloom(pos, SCREEN_TEXTURE), 1.0 / bloomAmount);    
	}else if (bloom_type == 1){
		COLOR.rgb += Bloom(pos, SCREEN_TEXTURE) * 1.0 / bloomAmount;    
	} 
	
	COLOR.a = 1.0;  
	COLOR.rgb = ToSrgb(COLOR.rgb);
}"

[sub_resource type="ShaderMaterial" id=16]
render_priority = 42
shader = SubResource( 15 )
shader_param/res = Vector2( 960, 576 )
shader_param/mask_type = 0
shader_param/bloom_type = 1
shader_param/hardScan = -1.904
shader_param/hardPix = 0.0
shader_param/hardBloomScan = -1.25
shader_param/hardBloomPix = -0.526
shader_param/bloomAmount = 16.0
shader_param/warp = Vector2( 200, 400 )
shader_param/maskDark = 1.0
shader_param/maskLight = 1.75

[node name="Titlescreen" type="Node"]
script = ExtResource( 1 )

[node name="title cylinder" type="MeshInstance" parent="."]
transform = Transform( 5, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0 )
mesh = ExtResource( 3 )
skeleton = NodePath("../WorldEnvironment")
material/0 = SubResource( 17 )
script = ExtResource( 5 )

[node name="title cylinder2" type="MeshInstance" parent="."]
transform = Transform( 5, 0, 0, 0, 5, 0, 0, 0, 5, 0, -27.3234, 0 )
mesh = ExtResource( 3 )
skeleton = NodePath("../WorldEnvironment")
material/0 = SubResource( 18 )
script = ExtResource( 5 )

[node name="DreamshockLogoGameVersion" type="Sprite" parent="."]
position = Vector2( 392, 80 )
texture = ExtResource( 2 )

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 2 )

[node name="Camera" type="Camera" parent="."]
transform = Transform( 1, 0, 0, 0, 0.858289, 0.513167, 0, -0.513167, 0.858289, 0, 13.0196, 5.80838 )
fov = 55.9

[node name="BGM" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 6 )
autoplay = true
bus = "BGM"

[node name="DemoText" type="Label" parent="."]
margin_left = 261.0
margin_top = 186.0
margin_right = 1025.0
margin_bottom = 211.0
theme = ExtResource( 7 )
text = "DEMO
"
align = 1

[node name="SAGEDEMO" type="Sprite" parent="."]
position = Vector2( 577, 132 )
texture = ExtResource( 8 )
script = ExtResource( 12 )

[node name="copyright stuff" type="Label" parent="."]
margin_left = 1.0
margin_top = 409.0
margin_right = 765.0
margin_bottom = 434.0
theme = ExtResource( 7 )
text = "TRNK MEDIA/CHRONICLE 2022, 2023                                                      SAGE DEMO"
align = 1

[node name="version" type="Label" parent="."]
margin_left = -0.864197
margin_top = 2.31897
margin_right = 958.136
margin_bottom = 27.319
theme = ExtResource( 7 )
text = "V1.01D"

[node name="labels" type="Node2D" parent="."]
position = Vector2( -79, -131 )

[node name="startgame" type="Label" parent="labels"]
margin_top = 302.319
margin_right = 959.0
margin_bottom = 353.319
theme = ExtResource( 7 )
text = "Start Game"
align = 1

[node name="alpha" type="AnimationPlayer" parent="labels/startgame"]
anims/RESET = SubResource( 3 )
anims/alph = SubResource( 4 )

[node name="Training" type="Label" parent="labels"]
margin_top = 349.0
margin_right = 959.0
margin_bottom = 400.0
theme = ExtResource( 7 )
text = "Training"
align = 1

[node name="alpha" type="AnimationPlayer" parent="labels/Training"]
anims/RESET = SubResource( 19 )
anims/alph = SubResource( 20 )

[node name="xstory" type="Label" parent="labels"]
margin_left = 1.0
margin_top = 394.0
margin_right = 960.0
margin_bottom = 445.0
theme = ExtResource( 7 )
text = "X story"
align = 1

[node name="alpha" type="AnimationPlayer" parent="labels/xstory"]
anims/RESET = SubResource( 5 )
anims/alph = SubResource( 6 )

[node name="extras" type="Label" parent="labels"]
margin_left = 1.0
margin_top = 446.0
margin_right = 960.0
margin_bottom = 497.0
theme = ExtResource( 7 )
text = "Extras"
align = 1

[node name="alpha" type="AnimationPlayer" parent="labels/extras"]
anims/RESET = SubResource( 7 )
anims/alph = SubResource( 8 )

[node name="options" type="Label" parent="labels"]
margin_left = 1.0
margin_top = 498.0
margin_right = 960.0
margin_bottom = 549.0
theme = ExtResource( 7 )
text = "Options"
align = 1

[node name="alpha" type="AnimationPlayer" parent="labels/options"]
anims/RESET = SubResource( 9 )
anims/alph = SubResource( 10 )

[node name="Accept" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 9 )
volume_db = 15.663

[node name="ColorRect" type="ColorRect" parent="."]
material = SubResource( 12 )
margin_right = 768.0
margin_bottom = 432.0

[node name="transition" type="AnimationPlayer" parent="ColorRect"]
anims/RESET = SubResource( 13 )
anims/changescreen = SubResource( 14 )

[node name="crt" type="Sprite" parent="."]
modulate = Color( 1, 1, 1, 0.45098 )
material = SubResource( 16 )
position = Vector2( 387, 218 )
scale = Vector2( 1.20135, 1.21533 )
texture = ExtResource( 11 )

[node name="Camera2D" parent="." instance=ExtResource( 13 )]
limit_right = 768
limit_bottom = 433

[connection signal="finished" from="Accept" to="." method="_on_Accept_finished"]
[connection signal="animation_finished" from="ColorRect/transition" to="." method="_on_transition_animation_finished"]
