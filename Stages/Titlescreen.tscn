[gd_scene load_steps=38 format=2]

[ext_resource path="res://Stages/Titlescreen.gd" type="Script" id=1]
[ext_resource path="res://Sprites/Misc/Dreamshock Logo Final.png" type="Texture" id=2]
[ext_resource path="res://meshes/TITCYL/title cylinder.obj" type="ArrayMesh" id=3]
[ext_resource path="res://Sprites/Textures/scityfogeffect.png" type="Texture" id=4]
[ext_resource path="res://Stages/title cylinder.gd" type="Script" id=5]
[ext_resource path="res://Audio/BGM/Intro.wav" type="AudioStream" id=6]
[ext_resource path="res://TextMain.tres" type="Theme" id=7]
[ext_resource path="res://Sprites/Misc/SAGE2023ALTPIXELART.PNG" type="Texture" id=8]
[ext_resource path="res://Audio/SE/Start.wav" type="AudioStream" id=9]
[ext_resource path="res://Sprites/Textures/LOADING.png" type="Texture" id=10]
[ext_resource path="res://Subrooms/SESC.gd" type="Script" id=12]

[sub_resource type="SpatialMaterial" id=17]
flags_unshaded = true
params_diffuse_mode = 1
params_specular_mode = 1
params_cull_mode = 2
params_line_width = 0.1
albedo_color = Color( 0.321569, 0.305882, 0.878431, 1 )
albedo_texture = ExtResource( 4 )

[sub_resource type="SpatialMaterial" id=18]
flags_unshaded = true
params_cull_mode = 2
albedo_color = Color( 0.321569, 0.305882, 0.878431, 1 )
albedo_texture = ExtResource( 4 )

[sub_resource type="Shader" id=23]

[sub_resource type="ShaderMaterial" id=22]
shader = SubResource( 23 )

[sub_resource type="Shader" id=24]
code = "/*
	Glitch Effect Shader by Yui Kinomoto @arlez80

	MIT License
*/

shader_type canvas_item;

// 振動の強さ
uniform float shake_power = 0.03;
// 振動率
uniform float shake_rate : hint_range( 0.0, 1.0 ) = 0.2;
// 振動速度
uniform float shake_speed = 5.0;
// 振動ブロックサイズ
uniform float shake_block_size = 30.5;
// 色の分離率
uniform float shake_color_rate : hint_range( 0.0, 1.0 ) = 0.01;

float random( float seed )
{
	return fract( 543.2543 * sin( dot( vec2( seed, seed ), vec2( 3525.46, -54.3415 ) ) ) );
}

void fragment( )
{
	float enable_shift = float(
		random( trunc( TIME * shake_speed ) )
	<	shake_rate
	);

	vec2 fixed_uv = SCREEN_UV;
	fixed_uv.x += (
		random(
			( trunc( SCREEN_UV.y * shake_block_size ) / shake_block_size )
		+	TIME
		) - 0.5
	) * shake_power * enable_shift;

	vec4 pixel_color = textureLod( SCREEN_TEXTURE, fixed_uv, 0.0 );
	pixel_color.r = mix(
		pixel_color.r
	,	textureLod( SCREEN_TEXTURE, fixed_uv + vec2( shake_color_rate, 0.0 ), 0.0 ).r
	,	enable_shift
	);
	pixel_color.b = mix(
		pixel_color.b
	,	textureLod( SCREEN_TEXTURE, fixed_uv + vec2( -shake_color_rate, 0.0 ), 0.0 ).b
	,	enable_shift
	);
	COLOR = pixel_color;
}
"

[sub_resource type="ShaderMaterial" id=25]
shader = SubResource( 24 )
shader_param/shake_power = 0.01
shader_param/shake_rate = 0.106
shader_param/shake_speed = 10.0
shader_param/shake_block_size = 3.0
shader_param/shake_color_rate = 0.01

[sub_resource type="Shader" id=26]
code = "// Converted/modified from ShaderToy: https://www.shadertoy.com/view/ldBXDD
// Attach this shader to a ColorRect

shader_type canvas_item;

uniform float wave_count : hint_range(1.0, 20.0, 1.0) = 20.0;
uniform float speed : hint_range(0.0, 10.0, 0.1) = 3.0;
uniform float height : hint_range(0.0, 0.1, 0.001) = 0.003;

void fragment() {
	vec2 cPos = -1.0 + 2.0 * UV / (1.0 / TEXTURE_PIXEL_SIZE);
	float cLength = length(cPos);
	vec2 uv = FRAGCOORD.xy / (1.0 / SCREEN_PIXEL_SIZE).xy + (cPos/cLength) * cos(cLength * wave_count - TIME * speed) * height;
    vec3 col = texture(SCREEN_TEXTURE,uv).xyz;
	COLOR = vec4(col,1.0);
}"

[sub_resource type="ShaderMaterial" id=27]
shader = SubResource( 26 )
shader_param/wave_count = 20.0
shader_param/speed = 3.0
shader_param/height = 0.003

[sub_resource type="Environment" id=2]

[sub_resource type="PlaneMesh" id=28]

[sub_resource type="Shader" id=29]
code = "/*
	動的電撃シェーダー by あるる（きのもと 結衣）
	Procedural Electric Current Shader by Yui Kinomoto @arlez80

	MIT License
*/
shader_type spatial;
render_mode unshaded, blend_add;

uniform vec4 light_color : hint_color = vec4( 0.32, 0.5, 0.82, 0.5 );
uniform vec4 arc_color : hint_color = vec4( 0.46, 0.68, 1.0, 1.0 );

uniform vec2 seed = vec2( 0.0, 0.0 );
uniform float speed = 5.1;
uniform float random_scale = 4.6;
uniform float electro_scale = 11.459;

vec2 random( vec2 pos )
{ 
	return fract(
		sin(
			vec2(
				dot(pos, vec2(12.9898,78.233))
			,	dot(pos, vec2(-148.998,-65.233))
			)
		) * 43758.5453
	);
}

float value_noise( vec2 pos )
{
	vec2 p = floor( pos );
	vec2 f = fract( pos );

	float v00 = random( p + vec2( 0.0, 0.0 ) ).x;
	float v10 = random( p + vec2( 1.0, 0.0 ) ).x;
	float v01 = random( p + vec2( 0.0, 1.0 ) ).x;
	float v11 = random( p + vec2( 1.0, 1.0 ) ).x;

	vec2 u = f * f * ( 3.0 - 2.0 * f );

	return mix( mix( v00, v10, u.x ), mix( v01, v11, u.x ), u.y );
}

float noise_tex( vec2 p )
{
	return (
		value_noise( p * 0.984864 ) * 0.5
	+	value_noise( p * 2.543 ) * 0.25
	+	value_noise( p * 9.543543 ) * 0.125
	+	value_noise( p * 21.65436 ) * 0.0625
	+	value_noise( p * 42.0 ) * 0.03125
	+	value_noise( p * 87.135148 ) * 0.015625
	+	value_noise( p * 340.66534654 ) * 0.0078125
	);
}

void fragment( )
{
	vec2 uv = seed + vec2( UV.x + cos( TIME * 1321.21 + UV.y * 348.513 ) * 0.004, UV.y + sin( TIME * 421.21 + UV.x * 314.513 ) * 0.0016 );
	float f = abs( cos( TIME * speed + noise_tex( uv * random_scale ) * electro_scale ) );

	ALBEDO = mix( light_color, arc_color, 1.0 - clamp( ( f - 0.08 ) * 20.0, 0.0, 1.0 ) ).rgb;
	ALPHA = 1.0 - clamp( ( f - 0.3 ) * 3.0, 0.0, 1.0 );
}"

[sub_resource type="ShaderMaterial" id=30]
shader = SubResource( 29 )
shader_param/light_color = Color( 0.0627451, 0, 0.807843, 1 )
shader_param/arc_color = Color( 0.639216, 0.639216, 0.639216, 1 )
shader_param/seed = Vector2( 0, 0 )
shader_param/speed = 0.6
shader_param/random_scale = 1.0
shader_param/electro_scale = 50.0

[sub_resource type="Animation" id=3]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=4]
resource_name = "alph"
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.6, 1 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=19]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=20]
resource_name = "alph"
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.6, 1 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=5]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=6]
resource_name = "alph"
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.6, 1 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=7]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=8]
resource_name = "alph"
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.6, 1 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=9]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=10]
resource_name = "alph"
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.6, 1 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Shader" id=11]
code = "/*
	ギザギザトランジションシェーダー by あるる（きのもと 結衣）
	Saw Transition Shader by KINOMOTO Yui

	MIT License
*/
shader_type canvas_item;

uniform float saw_b_shift = -0.267;
uniform float saw_a_interval = 1.0;
uniform float saw_b_interval = 2.0;
uniform float saw_a_scale = 1.0;
uniform float saw_b_scale = 0.821;

uniform vec2 uv_scale = vec2( 3.0, 8.0 );
uniform sampler2D tex : hint_albedo;
uniform vec4 color : hint_color = vec4( 0.0, 0.0, 0.0, 1.0 );

uniform float right = 0.0;
uniform float left = -1.0;

float calc_saw( float y, float interval, float scale )
{
	return max( ( abs( interval / 2.0 - mod( y, interval ) ) - ( interval / 2.0 - 0.5 ) ) * scale, 0.0 );
}

void fragment( )
{
	vec2 scaled_uv = UV * uv_scale;
	float saw_a = calc_saw( scaled_uv.y, saw_a_interval, saw_a_scale );
	float saw_b = calc_saw( scaled_uv.y + saw_b_shift, saw_b_interval, saw_b_scale );

	vec4 texture_pixel = texture( tex, UV );

	COLOR = vec4(
		color.rgb * texture_pixel.rgb
	,	color.a * texture_pixel.a
		* float( scaled_uv.x < max( saw_a, saw_b ) + right )
		* float( max( saw_a, saw_b ) + left < scaled_uv.x )
	);
}"

[sub_resource type="ShaderMaterial" id=12]
shader = SubResource( 11 )
shader_param/saw_b_shift = -0.267
shader_param/saw_a_interval = 0.687
shader_param/saw_b_interval = 2.0
shader_param/saw_a_scale = 1.974
shader_param/saw_b_scale = 0.821
shader_param/uv_scale = Vector2( 3, 8 )
shader_param/color = Color( 1, 1, 1, 1 )
shader_param/right = -1.012
shader_param/left = -1.0
shader_param/tex = ExtResource( 10 )

[sub_resource type="Animation" id=13]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath(".:material:shader_param/right")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ -1.012 ]
}

[sub_resource type="Animation" id=14]
length = 2.0
tracks/0/type = "value"
tracks/0/path = NodePath(".:material:shader_param/right")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.6 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ -1.012, 2.913 ]
}

[node name="Titlescreen" type="Node"]
script = ExtResource( 1 )

[node name="title cylinder" type="MeshInstance" parent="."]
transform = Transform( 5, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0 )
mesh = ExtResource( 3 )
skeleton = NodePath("../WorldEnvironment")
material/0 = SubResource( 17 )
script = ExtResource( 5 )

[node name="title cylinder2" type="MeshInstance" parent="."]
transform = Transform( 5, 0, 0, 0, 5, 0, 0, 0, 5, 0, -27.3234, 0 )
mesh = ExtResource( 3 )
skeleton = NodePath("../WorldEnvironment")
material/0 = SubResource( 18 )
script = ExtResource( 5 )

[node name="DreamshockLogoGameVersion" type="Sprite" parent="."]
material = SubResource( 22 )
position = Vector2( 192, 61 )
scale = Vector2( 0.593137, 0.593137 )
texture = ExtResource( 2 )

[node name="ColorRect" type="ColorRect" parent="DreamshockLogoGameVersion"]
visible = false
material = SubResource( 25 )
margin_left = -170.0
margin_top = -93.0
margin_right = 164.0
margin_bottom = 118.0

[node name="ColorRect2" type="ColorRect" parent="DreamshockLogoGameVersion"]
modulate = Color( 1, 1, 1, 0.34 )
material = SubResource( 27 )
margin_left = -172.0
margin_top = -101.0
margin_right = 182.0
margin_bottom = 86.0

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 2 )

[node name="CSGMesh" type="CSGMesh" parent="."]
transform = Transform( 6.34178, 0, 0, 0, 3.07796, -3.23112, 0, 0.0799944, 1.50465, 0, 9.39334, 0.228354 )
mesh = SubResource( 28 )
material = SubResource( 30 )

[node name="Camera" type="Camera" parent="."]
transform = Transform( 1, 0, 0, 0, 0.858289, 0.513167, 0, -0.513167, 0.858289, 0, 13.0196, 5.80838 )
fov = 53.8

[node name="BGM" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 6 )
autoplay = true
bus = "BGM"

[node name="DemoText" type="Label" parent="."]
margin_left = 261.0
margin_top = 186.0
margin_right = 1025.0
margin_bottom = 211.0
theme = ExtResource( 7 )
text = "DEMO
"
align = 1

[node name="SAGEDEMO" type="Sprite" parent="."]
position = Vector2( 577, 132 )
texture = ExtResource( 8 )
script = ExtResource( 12 )

[node name="copyright stuff" type="Label" parent="."]
margin_top = 215.0
margin_right = 768.0
margin_bottom = 225.0
rect_scale = Vector2( 0.5, 1 )
theme = ExtResource( 7 )
text = "TRNK MEDIA/CHRONICLE 2022, 2023                                                      SAGE DEMO"
align = 1

[node name="version" type="Label" parent="."]
margin_left = -0.864197
margin_top = 2.31897
margin_right = 958.136
margin_bottom = 27.319
theme = ExtResource( 7 )
text = "V1.01D"

[node name="labels" type="Node2D" parent="."]
position = Vector2( -79, -131 )

[node name="startgame" type="Label" parent="labels"]
margin_left = 79.0
margin_top = 242.0
margin_right = 847.0
margin_bottom = 255.0
rect_scale = Vector2( 0.5, 1 )
theme = ExtResource( 7 )
text = "Start Game"
align = 1

[node name="alpha" type="AnimationPlayer" parent="labels/startgame"]
anims/RESET = SubResource( 3 )
anims/alph = SubResource( 4 )

[node name="Training" type="Label" parent="labels"]
margin_left = 79.0
margin_top = 258.0
margin_right = 847.0
margin_bottom = 270.0
rect_scale = Vector2( 0.5, 1 )
theme = ExtResource( 7 )
text = "Training"
align = 1

[node name="alpha" type="AnimationPlayer" parent="labels/Training"]
anims/RESET = SubResource( 19 )
anims/alph = SubResource( 20 )

[node name="xstory" type="Label" parent="labels"]
margin_left = 79.0
margin_top = 273.0
margin_right = 847.0
margin_bottom = 287.0
rect_scale = Vector2( 0.5, 1 )
theme = ExtResource( 7 )
text = "X story"
align = 1

[node name="alpha" type="AnimationPlayer" parent="labels/xstory"]
anims/RESET = SubResource( 5 )
anims/alph = SubResource( 6 )

[node name="extras" type="Label" parent="labels"]
margin_left = 79.0
margin_top = 287.0
margin_right = 847.0
margin_bottom = 297.0
rect_scale = Vector2( 0.5, 1 )
theme = ExtResource( 7 )
text = "Extras"
align = 1

[node name="alpha" type="AnimationPlayer" parent="labels/extras"]
anims/RESET = SubResource( 7 )
anims/alph = SubResource( 8 )

[node name="options" type="Label" parent="labels"]
margin_left = 79.0
margin_top = 300.0
margin_right = 847.0
margin_bottom = 311.0
rect_scale = Vector2( 0.5, 1 )
theme = ExtResource( 7 )
text = "Options"
align = 1

[node name="alpha" type="AnimationPlayer" parent="labels/options"]
anims/RESET = SubResource( 9 )
anims/alph = SubResource( 10 )

[node name="Accept" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 9 )
volume_db = 15.663

[node name="ColorRect" type="ColorRect" parent="."]
material = SubResource( 12 )
margin_right = 768.0
margin_bottom = 432.0
__meta__ = {
"_edit_lock_": true
}

[node name="transition" type="AnimationPlayer" parent="ColorRect"]
anims/RESET = SubResource( 13 )
anims/changescreen = SubResource( 14 )

[connection signal="finished" from="Accept" to="." method="_on_Accept_finished"]
[connection signal="animation_finished" from="ColorRect/transition" to="." method="_on_transition_animation_finished"]
