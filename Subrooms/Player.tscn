[gd_scene load_steps=84 format=2]

[ext_resource path="res://Stages/player.gd" type="Script" id=1]
[ext_resource path="res://src/pause.gd" type="Script" id=2]
[ext_resource path="res://Audio/Voices/damage 3.wav" type="AudioStream" id=3]
[ext_resource path="res://Audio/SE/402767__mattix__8bit-coin-03.wav" type="AudioStream" id=4]
[ext_resource path="res://Audio/Voices/atkproj4.wav" type="AudioStream" id=5]
[ext_resource path="res://Audio/Voices/atkproj2.wav" type="AudioStream" id=6]
[ext_resource path="res://Audio/Voices/atkproj1.wav" type="AudioStream" id=7]
[ext_resource path="res://Audio/Voices/damage 2.wav" type="AudioStream" id=8]
[ext_resource path="res://Audio/Voices/damage 1.wav" type="AudioStream" id=9]
[ext_resource path="res://Audio/Voices/atkproj3.wav" type="AudioStream" id=10]
[ext_resource path="res://Audio/Voices/Dodge1.wav" type="AudioStream" id=11]
[ext_resource path="res://Stages/hp.gd" type="Script" id=12]
[ext_resource path="res://Stages/tex.gd" type="Script" id=13]
[ext_resource path="res://Stages/Diemeter.gd" type="Script" id=14]
[ext_resource path="res://src/timertext.gd" type="Script" id=15]
[ext_resource path="res://TextMain.tres" type="Theme" id=16]
[ext_resource path="res://Sprites/gui/guicon3.png" type="Texture" id=17]
[ext_resource path="res://Sprites/gui/Rian Map.png" type="Texture" id=18]
[ext_resource path="res://Sprites/gui/Healthicon1.png" type="Texture" id=19]
[ext_resource path="res://Sprites/gui/guicon1.png" type="Texture" id=20]
[ext_resource path="res://Sprites/Stage/SCity/FGwaver.png" type="Texture" id=21]
[ext_resource path="res://Sprites/gui/TEXTBOX.png" type="Texture" id=22]
[ext_resource path="res://Sprites/Misc/screenblack.png" type="Texture" id=23]
[ext_resource path="res://Audio/Voices/attack dash.wav" type="AudioStream" id=24]
[ext_resource path="res://Sprites/gui/Game over Final.png" type="Texture" id=25]
[ext_resource path="res://Audio/BGM/Game Over.ogg" type="AudioStream" id=26]
[ext_resource path="res://Fonts/hudJ.tres" type="DynamicFont" id=27]
[ext_resource path="res://Stages/text setting.gd" type="Script" id=28]
[ext_resource path="res://Maxpow.tres" type="Shader" id=29]
[ext_resource path="res://Stages/Cameramain.gd" type="Script" id=30]
[ext_resource path="res://Sprites/Players/Rian/RianFrames.tres" type="SpriteFrames" id=31]
[ext_resource path="res://Sprites/CGs/YaibaIntro.png" type="Texture" id=32]
[ext_resource path="res://Subrooms/Scarf.tscn" type="PackedScene" id=33]
[ext_resource path="res://Subrooms/HudBanner1.tscn" type="PackedScene" id=34]
[ext_resource path="res://Subrooms/HudBanner2.tscn" type="PackedScene" id=35]
[ext_resource path="res://Audio/BGM/Stick City B.ogg" type="AudioStream" id=36]

[sub_resource type="GDScript" id=262]

[sub_resource type="Theme" id=271]
script = SubResource( 262 )

[sub_resource type="AtlasTexture" id=261]
atlas = ExtResource( 18 )
region = Rect2( 0, 0, 32, 32 )

[sub_resource type="AtlasTexture" id=2]
atlas = ExtResource( 18 )
region = Rect2( 32, 0, 32, 32 )

[sub_resource type="AtlasTexture" id=3]
atlas = ExtResource( 18 )
region = Rect2( 64, 0, 32, 32 )

[sub_resource type="AtlasTexture" id=4]
atlas = ExtResource( 18 )
region = Rect2( 96, 0, 32, 32 )

[sub_resource type="SpriteFrames" id=272]
animations = [ {
"frames": [ SubResource( 261 ), SubResource( 2 ), SubResource( 3 ), SubResource( 4 ) ],
"loop": true,
"name": "main",
"speed": 10.0
} ]

[sub_resource type="Shader" id=263]
code = "shader_type canvas_item;

uniform float speed = 8.0;
uniform float waves = 200.0;

float Remap01(float value, float from, float to) {
	return (value - from) / (to - from);
}

void fragment() {
	vec2 uv = UV;
	uv.x += Remap01(sin(uv.y * waves - (TIME * speed)), -waves, waves) - 0.53;

	vec4 color = texture(TEXTURE, uv);

	COLOR =  color;
}"

[sub_resource type="ShaderMaterial" id=273]
shader = SubResource( 263 )
shader_param/speed = 8.0
shader_param/waves = 200.0

[sub_resource type="Animation" id=274]
resource_name = "Gameoverend"
length = 1.8
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ) ]
}

[sub_resource type="Animation" id=275]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ) ]
}

[sub_resource type="Animation" id=276]
resource_name = "gameover"
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Shader" id=270]
code = "//SHADER ORIGINALY CREADED BY \"TimothyLottes\" FROM SHADERTOY
//PORTED AND MODIFYED TO GODOT BY AHOPNESS (@ahopness)
//LICENSE : CC0
//COMATIBLE WITH : GLES2, GLES3, WEBGL
//SHADERTOY LINK : https://www.shadertoy.com/view/MsjXzh

// PUBLIC DOMAIN CRT STYLED SCAN-LINE SHADER
//
//   by Timothy Lottes
//
// This is more along the style of a really good CGA arcade monitor.
// With RGB inputs instead of NTSC.
// The shadow mask example has the mask rotated 90 degrees for less chromatic aberration.
//
// Left it unoptimized to show the theory behind the algorithm.
//
// It is an example what I personally would want as a display option for pixel art games.
// Please take and use, change, or whatever.

shader_type canvas_item;

// Emulated input resolution.
uniform vec2 res;

// Mask type
//  0 = Very compressed TV style shadow mask
//  1 = Stretched VGA style shadow mask (same as prior shaders)
//  2 = VGA style shadow mask 
uniform int mask_type :hint_range(0, 2) = 0;

// Bloom Type
//  0 = Normalized exposure
//  1 = Aditive bloom
//  2 = No Bloom
uniform int bloom_type :hint_range(0, 2) = 0;

// Hardness of scanline.
//  -8.0 = soft
// -16.0 = medium
uniform float hardScan :hint_range(-12.0, -1.0) = -8.0;

// Hardness of pixels in scanline.
// -2.0 = soft
// -4.0 = hard
uniform float hardPix :hint_range(-4.0, 0.0) = -2.0;

// Hardness of short vertical bloom.
//  -1.0 = wide to the point of clipping (bad)
//  -1.5 = wide
//  -4.0 = not very wide at all
uniform float hardBloomScan :hint_range(-4.0, 0.0) = -2.0;

// Hardness of short horizontal bloom.
//  -0.5 = wide to the point of clipping (bad)
//  -1.0 = wide
//  -2.0 = not very wide at all
uniform float hardBloomPix :hint_range(-2.0, 0.0) = -1.5;

// Amount of small bloom effect.
//  1.0/1.0 = only bloom
//  1.0/16.0 = what I think is a good amount of small bloom
//  0.0     = no bloom
uniform float bloomAmount :hint_range(1.0, 16.0) = 16.0;

// Display warp.
// 0.0 = none
// 1.0/8.0 = extreme
uniform vec2 warp = vec2(64.0, 24.0); 

// Amount of shadow mask.
uniform float maskDark  :hint_range(0.0, 1.0) = 0.5;
uniform float maskLight :hint_range(1.0, 2.0) = 1.5;

//------------------------------------------------------------------------

// sRGB to Linear.
// Assuing using sRGB typed textures this should not be needed.
float ToLinear1(float c){ return(c <= 0.04045) ? c / 12.92 : pow((c + 0.055) / 1.055, 2.4); }
vec3 ToLinear(vec3 c){ return vec3(ToLinear1(c.r), ToLinear1(c.g), ToLinear1(c.b)); }

// Linear to sRGB.
// Assuing using sRGB typed textures this should not be needed.
float ToSrgb1(float c){ return(c < 0.0031308?c * 12.92 : 1.055 * pow(c, 0.41666) - 0.055); }
vec3 ToSrgb(vec3 c){ return vec3(ToSrgb1(c.r), ToSrgb1(c.g), ToSrgb1(c.b)); }

// Nearest emulated sample given floating point position and texel offset.
// Also zero's off screen.
vec3 Fetch(vec2 pos, vec2 off, sampler2D iChannel0){
	pos = floor(pos * res + off) / res;
	
	if(max(abs(pos.x - 0.5), abs(pos.y - 0.5)) > 0.5){
		return vec3(0.0, 0.0, 0.0);
	}
	
	return ToLinear(texture(iChannel0 , pos.xy , -16.0).rgb);
}

// Distance in emulated pixels to nearest texel.
vec2 Dist(vec2 pos){ 
	pos = pos * res; 
	return - ((pos - floor(pos)) - vec2(0.5));
}
    
// 1D Gaussian.
float Gaus(float pos, float scale){ return exp2(scale * pos * pos); }

// 3-tap Gaussian filter along horz line.
vec3 Horz3(vec2 pos, float off, sampler2D iChannel0){
	vec3 b = Fetch(pos, vec2(-1.0, off), iChannel0);
	vec3 c = Fetch(pos, vec2( 0.0, off), iChannel0);
	vec3 d = Fetch(pos, vec2( 1.0, off), iChannel0);
	float dst = Dist(pos).x;
	
	// Convert distance to weight.
	float scale = hardPix;
	float wb = Gaus(dst - 1.0, scale);
	float wc = Gaus(dst + 0.0, scale);
	float wd = Gaus(dst + 1.0, scale);
	
	// Return filtered sample.
	return (b * wb + c * wc + d * wd) / (wb + wc + wd);
}
// 5-tap Gaussian filter along horz line.
vec3 Horz5(vec2 pos, float off, sampler2D iChannel0){
	vec3 a = Fetch(pos, vec2(-2.0, off), iChannel0);
	vec3 b = Fetch(pos, vec2(-1.0, off), iChannel0);
	vec3 c = Fetch(pos, vec2( 0.0, off), iChannel0);
	vec3 d = Fetch(pos, vec2( 1.0, off), iChannel0);
	vec3 e = Fetch(pos, vec2( 2.0, off), iChannel0);
	float dst = Dist(pos).x;
	
	// Convert distance to weight.
	float scale = hardPix;
	float wa = Gaus(dst - 2.0, scale);
	float wb = Gaus(dst - 1.0, scale);
	float wc = Gaus(dst + 0.0, scale);
	float wd = Gaus(dst + 1.0, scale);
	float we = Gaus(dst + 2.0, scale);
	
	// Return filtered sample.
	return (a * wa + b * wb + c * wc + d * wd + e * we) / (wa + wb + wc + wd + we);
}
// 7-tap Gaussian filter along horz line.
vec3 Horz7(vec2 pos, float off, sampler2D iChannel0){
	vec3 a = Fetch(pos, vec2(-3.0, off), iChannel0);
	vec3 b = Fetch(pos, vec2(-2.0, off), iChannel0);
	vec3 c = Fetch(pos, vec2( 1.0, off), iChannel0);
	vec3 d = Fetch(pos, vec2( 0.0, off), iChannel0);
	vec3 e = Fetch(pos, vec2( 1.0, off), iChannel0);
	vec3 f = Fetch(pos, vec2( 2.0, off), iChannel0);
	vec3 g = Fetch(pos, vec2( 3.0, off), iChannel0);
	float dst = Dist(pos).x;
	
	// Convert distance to weight.
	float scale = hardBloomPix;
	float wa = Gaus(dst - 3.0, scale);
	float wb = Gaus(dst - 2.0, scale);
	float wc = Gaus(dst - 1.0, scale);
	float wd = Gaus(dst + 0.0, scale);
	float we = Gaus(dst + 1.0, scale);
	float wf = Gaus(dst + 2.0, scale);
	float wg = Gaus(dst + 3.0, scale);
	
	// Return filtered sample.
	return (a * wa + b * wb + c * wc + d * wd + e * we + f * wf + g * wg) / (wa + wb + wc + wd + we + wf + wg);
}

// Return scanline weight.
float Scan(vec2 pos, float off){
	float dst = Dist(pos).y;
	
	return Gaus(dst + off, hardScan);
}

// Return scanline weight for bloom.
float BloomScan(vec2 pos, float off){
	float dst = Dist(pos).y;
	
	return Gaus(dst + off, hardBloomScan);
}

// Allow nearest three lines to effect pixel.
vec3 Tri(vec2 pos, sampler2D iChannel0){
	vec3 a = Horz3(pos,-1.0, iChannel0);
	vec3 b = Horz5(pos, 0.0, iChannel0);
	vec3 c = Horz3(pos, 1.0, iChannel0);
	
	float wa = Scan(pos,-1.0);
	float wb = Scan(pos, 0.0);
	float wc = Scan(pos, 1.0);
	
	return a * wa + b * wb + c * wc;
}

// Small bloom.
vec3 Bloom(vec2 pos, sampler2D iChannel0){
	vec3 a = Horz5(pos,-2.0, iChannel0);
	vec3 b = Horz7(pos,-1.0, iChannel0);
	vec3 c = Horz7(pos, 0.0, iChannel0);
	vec3 d = Horz7(pos, 1.0, iChannel0);
	vec3 e = Horz5(pos, 2.0, iChannel0);
	
	float wa = BloomScan(pos,-2.0);
	float wb = BloomScan(pos,-1.0);
	float wc = BloomScan(pos, 0.0);
	float wd = BloomScan(pos, 1.0);
	float we = BloomScan(pos, 2.0);
	
	return a * wa + b * wb + c * wc + d * wd + e * we;
}

// Distortion of scanlines, and end of screen alpha.
vec2 Warp(vec2 pos){
	pos = pos * 2.0 - 1.0;    
	pos *= vec2(1.0 + (pos.y * pos.y) * 1.0 / warp.x, 1.0 + (pos.x * pos.x) * 1.0/ warp.y);
	
	return pos * 0.5+0.5;
}

vec3 Mask(vec2 pos){
	if (mask_type == 0){
		float line = maskLight;
		float odd = 0.0;
		
		if(fract(pos.x / 6.0) < 0.5) odd = 1.0;
		if(fract((pos.y + odd) / 2.0) < 0.5) line = maskDark;  
		pos.x = fract(pos.x / 3.0);
		
		vec3 mask = vec3(maskDark, maskDark, maskDark);
		if(pos.x < 0.333)mask.r = maskLight;
		else if(pos.x < 0.666)mask.g = maskLight;
		else mask.b = maskLight;
		
		mask *= line;
		return mask;
	}else if (mask_type == 1){
		pos.x += pos.y * 3.0;
		
		vec3 mask = vec3(maskDark, maskDark, maskDark);
		pos.x = fract(pos.x / 6.0);
		if(pos.x < 0.333)mask.r = maskLight;
		else if(pos.x < 0.666)mask.g = maskLight;
		else mask.b = maskLight;
		
		return mask;
	}else if (mask_type == 2){
		pos.xy = floor(pos.xy * vec2(1.0, 0.5));
		pos.x += pos.y * 3.0;
		
		vec3 mask = vec3(maskDark, maskDark, maskDark);
		pos.x = fract(pos.x / 6.0);
		if(pos.x < 0.333)mask.r = maskLight;
		else if(pos.x < 0.666)mask.g = maskLight;
		else mask.b = maskLight;
	
		return mask;
	}
  }    

// Draw dividing bars.
float Bar(float pos, float bar){ pos -= bar; return pos * pos < 4.0 ? 0.0 : 1.0; }

// Entry.
void fragment(){
	vec2 pos = Warp(FRAGCOORD.xy / (1.0 / SCREEN_PIXEL_SIZE).xy);
	
	COLOR.rgb = Tri(pos, SCREEN_TEXTURE) * Mask(FRAGCOORD.xy);
	if (bloom_type == 0){ 
		COLOR.rgb = mix(COLOR.rgb,Bloom(pos, SCREEN_TEXTURE), 1.0 / bloomAmount);    
	}else if (bloom_type == 1){
		COLOR.rgb += Bloom(pos, SCREEN_TEXTURE) * 1.0 / bloomAmount;    
	} 
	
	COLOR.a = 1.0;  
	COLOR.rgb = ToSrgb(COLOR.rgb);
}"

[sub_resource type="ShaderMaterial" id=277]
render_priority = 42
shader = SubResource( 270 )
shader_param/res = Vector2( 960, 576 )
shader_param/mask_type = 0
shader_param/bloom_type = 1
shader_param/hardScan = -1.904
shader_param/hardPix = 0.0
shader_param/hardBloomScan = -1.25
shader_param/hardBloomPix = -0.526
shader_param/bloomAmount = 16.0
shader_param/warp = Vector2( 200, 400 )
shader_param/maskDark = 1.0
shader_param/maskLight = 1.75

[sub_resource type="Shader" id=267]
code = "shader_type canvas_item;

uniform sampler2D noise;
uniform vec4 line_color_a: hint_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform vec4 line_color_b: hint_color = vec4(0.0, 1.0, 1.0, 1.0);
uniform float line_threshold = 0.6;
uniform float inverse_speed = 10.0;
uniform float line_length = 1000.0;
uniform float angle: hint_range(0.0, 360.0) = 0.0;


void fragment() {
	vec2 uv = vec2(UV.x * cos(radians(angle)) - UV.y * sin(radians(angle)), UV.x * sin(radians(angle)) + UV.y * cos(radians(angle)));
	vec4 noise_line = texture(noise, vec2(uv.x / line_length + TIME / inverse_speed, uv.y));
	vec4 color;
	if (noise_line.r < line_threshold){
		color = vec4(0.);
	} else {
		color = mix(line_color_a, line_color_b, 1.0 - noise_line.r);
	}
	COLOR = color;
}"

[sub_resource type="OpenSimplexNoise" id=278]

[sub_resource type="NoiseTexture" id=268]
flags = 31
width = 1258
height = 2730
noise = SubResource( 278 )
noise_offset = Vector2( -0.252, 0 )

[sub_resource type="ShaderMaterial" id=279]
shader = SubResource( 267 )
shader_param/line_color_a = Color( 0.839216, 0.972549, 1, 1 )
shader_param/line_color_b = Color( 0.0666667, 0.0156863, 1, 1 )
shader_param/line_threshold = 0.693
shader_param/inverse_speed = 0.2
shader_param/line_length = 14.905
shader_param/angle = 0.0
shader_param/noise = SubResource( 268 )

[sub_resource type="Shader" id=264]

[sub_resource type="ShaderMaterial" id=280]
shader = SubResource( 264 )

[sub_resource type="Animation" id=281]
resource_name = "Fadein"
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ) ]
}

[sub_resource type="Animation" id=282]
resource_name = "Fadeout"
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ), Color( 0, 0, 0, 1 ) ]
}

[sub_resource type="Animation" id=283]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ) ]
}

[sub_resource type="Shader" id=265]
code = "shader_type canvas_item;

uniform float speed = 8.0;
uniform float waves = 200.0;

float Remap01(float value, float from, float to) {
	return (value - from) / (to - from);
}

void fragment() {
	vec2 uv = UV;
	uv.x += Remap01(sin(uv.y * waves - (TIME * speed)), -waves, waves) - 0.53;

	vec4 color = texture(TEXTURE, uv);

	COLOR =  color;
}"

[sub_resource type="ShaderMaterial" id=284]
render_priority = 2
shader = SubResource( 265 )
shader_param/speed = 8.0
shader_param/waves = 200.0

[sub_resource type="Shader" id=266]
code = "// NOTE: Shader automatically converted from Godot Engine 3.4.2.stable's CanvasItemMaterial.



/*
	ボロノイ神経風 背景シェーダー by あるる（きのもと 結衣） @arlez80
	Voronoi Synapse-ish Background Shader by Yui Kinomoto @arlez80

	MIT License
*/
shader_type canvas_item;
render_mode blend_add;

uniform vec2 pixel_size = vec2( 0.001, 0.001 );

uniform float voronoi_scale = 20.0;
uniform float voronoi_seed = 0.0;

uniform float electric_scale = 20.0;
uniform float electric_speed = 1.0;
uniform float electric_power = 3.0;

vec2 random( vec2 pos )
{ 
	return fract(
		sin(
			vec2(
				dot(pos, vec2(12.9898,78.233))
			,	dot(pos, vec2(-148.998,-65.233))
			)
		) * 43758.5453
	);
}

vec2 voronoi( vec2 uv )
{
	vec2 v = uv * voronoi_scale + vec2( voronoi_seed, voronoi_seed );
	vec2 v_floor = floor( v );
	vec2 v_fract = fract( v );
	vec2 min_p = vec2( 0.0, 0.0 );
	float min_dist = 2.0;

	for( int y = -1; y <= 1; y ++ ) {
		for( int x = -1; x <= 1; x ++ ) {
			vec2 n = vec2( float( x ), float( y ) );
			vec2 p = random( v_floor + n );
			vec2 diff = p + n;
			float d = distance( v_fract, diff );

			min_p = mix( min_p, ( v + diff - v_fract ) / voronoi_scale, float( d < min_dist ) );
			min_dist = min( min_dist, d );
		}
	}

	return min_p;
}

vec2 sobel_coord_conv( vec2 v, int x, int y )
{
	return v + vec2( float( x-1 ), float( y-1 ) ) * pixel_size;
}

float sobel( vec2 uv )
{
	vec2 sobel[9] = {
		voronoi( sobel_coord_conv( uv, 0, 0 ) )
	,	voronoi( sobel_coord_conv( uv, 1, 0 ) )
	,	voronoi( sobel_coord_conv( uv, 2, 0 ) )
	,	voronoi( sobel_coord_conv( uv, 0, 1 ) )
	,	vec2( 0.0 )	// 未使用
	,	voronoi( sobel_coord_conv( uv, 2, 1 ) )
	,	voronoi( sobel_coord_conv( uv, 0, 2 ) )
	,	voronoi( sobel_coord_conv( uv, 1, 2 ) )
	,	voronoi( sobel_coord_conv( uv, 2, 2 ) )
	};
	vec2 sobel_src_x = (
		sobel[0] * -1.0
	+	sobel[3] * -2.0
	+	sobel[6] * -1.0
	+	sobel[2] * 1.0
	+	sobel[5] * 2.0
	+	sobel[8] * 1.0
	);
	vec2 sobel_src_y = (
		sobel[0] * -1.0
	+	sobel[1] * -2.0
	+	sobel[2] * -1.0
	+	sobel[6] * 1.0
	+	sobel[7] * 2.0
	+	sobel[8] * 1.0
	);

	return length( sqrt( sobel_src_x * sobel_src_x + sobel_src_y * sobel_src_y ) );
}

float electric( vec2 uv )
{
	return clamp( sobel( uv ) * mod( ( uv.x - uv.y ) * electric_scale / 3.0 - TIME * electric_speed, 1.0 ) * electric_power, 0.0, 1.0 );
}

void fragment( )
{
	COLOR = vec4( vec3( electric( UV + TIME * 0.1 ), electric( UV * 0.5 + TIME * 0.1 ), electric( UV * 0.25 + TIME * 0.1 ) ), 1.0);
}
"

[sub_resource type="ShaderMaterial" id=285]
shader = SubResource( 266 )
shader_param/pixel_size = Vector2( 0.001, 0.001 )
shader_param/voronoi_scale = 20.0
shader_param/voronoi_seed = 0.0
shader_param/electric_scale = 10.0
shader_param/electric_speed = 1.0
shader_param/electric_power = 1.0

[sub_resource type="Shader" id=269]
code = "/*
	Glitch Effect Shader by Yui Kinomoto @arlez80

	MIT License
*/

shader_type canvas_item;

// 振動の強さ
uniform float shake_power = 0.03;
// 振動率
uniform float shake_rate : hint_range( 0.0, 1.0 ) = 0.2;
// 振動速度
uniform float shake_speed = 5.0;
// 振動ブロックサイズ
uniform float shake_block_size = 30.5;
// 色の分離率
uniform float shake_color_rate : hint_range( 0.0, 1.0 ) = 0.01;

float random( float seed )
{
	return fract( 543.2543 * sin( dot( vec2( seed, seed ), vec2( 3525.46, -54.3415 ) ) ) );
}

void fragment( )
{
	float enable_shift = float(
		random( trunc( TIME * shake_speed ) )
	<	shake_rate
	);

	vec2 fixed_uv = SCREEN_UV;
	fixed_uv.x += (
		random(
			( trunc( SCREEN_UV.y * shake_block_size ) / shake_block_size )
		+	TIME
		) - 0.5
	) * shake_power * enable_shift;

	vec4 pixel_color = textureLod( SCREEN_TEXTURE, fixed_uv, 0.0 );
	pixel_color.r = mix(
		pixel_color.r
	,	textureLod( SCREEN_TEXTURE, fixed_uv + vec2( shake_color_rate, 0.0 ), 0.0 ).r
	,	enable_shift
	);
	pixel_color.b = mix(
		pixel_color.b
	,	textureLod( SCREEN_TEXTURE, fixed_uv + vec2( -shake_color_rate, 0.0 ), 0.0 ).b
	,	enable_shift
	);
	COLOR = pixel_color;
}"

[sub_resource type="ShaderMaterial" id=286]
shader = SubResource( 269 )
shader_param/shake_power = 0.03
shader_param/shake_rate = 0.2
shader_param/shake_speed = 5.0
shader_param/shake_block_size = 30.5
shader_param/shake_color_rate = 0.01

[sub_resource type="AtlasTexture" id=196]
atlas = ExtResource( 32 )
region = Rect2( 0, 0, 960, 576 )

[sub_resource type="AtlasTexture" id=194]
atlas = ExtResource( 32 )
region = Rect2( 960, 0, 960, 576 )

[sub_resource type="AtlasTexture" id=195]
atlas = ExtResource( 32 )
region = Rect2( 1920, 0, 960, 576 )

[sub_resource type="SpriteFrames" id=287]
animations = [ {
"frames": [ SubResource( 196 ) ],
"loop": true,
"name": "YaibaInt1",
"speed": 5.0
}, {
"frames": [ SubResource( 194 ), SubResource( 195 ) ],
"loop": false,
"name": "YaibaInt2",
"speed": 10.0
} ]

[sub_resource type="RectangleShape2D" id=288]
extents = Vector2( 488, 8 )

[sub_resource type="RectangleShape2D" id=289]
extents = Vector2( 4, 292 )

[sub_resource type="ShaderMaterial" id=290]
shader = ExtResource( 29 )
shader_param/Smooth = false
shader_param/width = 4.0
shader_param/outline_color = Color( 0, 1, 0.866667, 1 )
shader_param/pixel_size = 5
shader_param/width_speed = 6.0

[sub_resource type="OccluderPolygon2D" id=291]
cull_mode = 1
polygon = PoolVector2Array( -8, 24, 4, 24, 8, 8, 4, -12, -4, -12, -12, -4 )

[sub_resource type="CapsuleShape2D" id=292]
radius = 15.9794
height = 39.1286

[sub_resource type="RectangleShape2D" id=293]
extents = Vector2( 114.289, 45.6673 )

[sub_resource type="CircleShape2D" id=294]
radius = 41.0843

[sub_resource type="RectangleShape2D" id=295]
extents = Vector2( 28, 28 )

[sub_resource type="RectangleShape2D" id=296]
extents = Vector2( 24, 41 )

[sub_resource type="CircleShape2D" id=297]
radius = 8.0

[sub_resource type="Animation" id=298]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath(".:volume_db")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0.963 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("../../bossmus/bossmusic:volume_db")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 7.828 ]
}

[sub_resource type="Animation" id=299]
resource_name = "fadein"
tracks/0/type = "value"
tracks/0/path = NodePath(".:volume_db")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ -80.0, 0.963 ]
}

[sub_resource type="Animation" id=300]
resource_name = "fadeout"
tracks/0/type = "value"
tracks/0/path = NodePath(".:volume_db")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.999973, 1 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ 0.963, -52.897, -80.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("../../bossmus/bossmusic:volume_db")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 7.828, -80.0 ]
}

[sub_resource type="CapsuleShape2D" id=301]
radius = 20.807
height = 29.22

[node name="Rian" type="KinematicBody2D"]
position = Vector2( 507.193, 2123.95 )
script = ExtResource( 1 )

[node name="GUIStuff" type="CanvasLayer" parent="."]
layer = 3
script = ExtResource( 28 )

[node name="Bosshud" type="Node2D" parent="GUIStuff"]
position = Vector2( -320, -240 )

[node name="textbox" type="Node2D" parent="GUIStuff"]
visible = false
position = Vector2( -223.288, -51.7935 )

[node name="Sprite" type="Sprite" parent="GUIStuff/textbox"]
position = Vector2( 698.652, 531.702 )
scale = Vector2( 3, 3 )
texture = ExtResource( 22 )

[node name="tex" type="Label" parent="GUIStuff/textbox"]
margin_left = 512.0
margin_top = 499.272
margin_right = 963.0
margin_bottom = 602.272
theme = SubResource( 271 )
custom_fonts/font = ExtResource( 27 )
text = "何が起こっていますか？
しばらく前まではすべて順調でした！
Hey idiot!!! watch where you're steppin'!"
autowrap = true
script = ExtResource( 13 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="timer" type="Label" parent="GUIStuff"]
anchor_left = 0.062
anchor_top = 0.05
anchor_right = 0.287
anchor_bottom = 0.096
margin_left = 279.332
margin_top = -3.36358
margin_right = 325.332
margin_bottom = 12.6365
rect_scale = Vector2( 1.00818, 1.20287 )
theme = ExtResource( 16 )
text = "af12rf"
align = 1
autowrap = true
max_lines_visible = 1
script = ExtResource( 15 )
__meta__ = {
"_edit_use_anchors_": true
}

[node name="livescnt" type="Label" parent="GUIStuff/timer"]
anchor_left = 0.0387125
anchor_top = 1.7082
anchor_right = 0.263903
anchor_bottom = 1.75527
margin_left = -265.156
margin_top = 344.408
margin_right = -264.156
margin_bottom = 360.408
rect_scale = Vector2( 1.00818, 1.20287 )
text = "af12rf"
autowrap = true
max_lines_visible = 1
script = ExtResource( 15 )
__meta__ = {
"_edit_use_anchors_": true
}

[node name="fpscnt" type="Label" parent="GUIStuff/timer"]
anchor_left = -0.453803
anchor_top = 1.7788
anchor_right = 1.46604
anchor_bottom = 1.82586
margin_left = -27.1035
margin_top = 344.408
margin_right = -26.1035
margin_bottom = 360.408
rect_scale = Vector2( 1.00818, 1.20287 )
custom_colors/font_color = Color( 0.027451, 0.815686, 0.866667, 1 )
text = "af12rf"
align = 1
autowrap = true
max_lines_visible = 1
script = ExtResource( 15 )
__meta__ = {
"_edit_use_anchors_": true
}

[node name="Piececnt" type="Label" parent="GUIStuff/timer"]
anchor_left = 0.0747341
anchor_top = -0.0487021
anchor_right = 0.299734
anchor_bottom = -0.00270206
margin_left = -288.962
margin_top = -1.43181
margin_right = -287.962
margin_bottom = 14.5682
rect_scale = Vector2( 1.00818, 1.20287 )
text = "af12rf"
autowrap = true
max_lines_visible = 1
script = ExtResource( 15 )
__meta__ = {
"_edit_use_anchors_": true
}

[node name="boltcnt" type="Label" parent="GUIStuff/timer"]
anchor_left = 1.11128
anchor_top = 1.74275
anchor_right = 1.33628
anchor_bottom = 1.78875
margin_left = 242.69
margin_top = 344.408
margin_right = 243.69
margin_bottom = 360.408
rect_scale = Vector2( 1.00818, 1.20287 )
text = "af12rf"
autowrap = true
max_lines_visible = 1
script = ExtResource( 15 )
__meta__ = {
"_edit_use_anchors_": true
}

[node name="GUI" type="Node2D" parent="GUIStuff/timer"]
position = Vector2( -316.88, -19.4692 )
scale = Vector2( 0.991887, 0.831347 )

[node name="Piececnt2" type="Sprite" parent="GUIStuff/timer/GUI"]
position = Vector2( 20.7109, 31.2248 )
scale = Vector2( 2, 2 )
texture = ExtResource( 20 )

[node name="hpico" type="Sprite" parent="GUIStuff/timer/GUI"]
position = Vector2( 887.835, 47.4189 )
scale = Vector2( 2, 2 )
z_index = 4
texture = ExtResource( 19 )
script = ExtResource( 12 )

[node name="AnimatedSprite" type="AnimatedSprite" parent="GUIStuff/timer/GUI"]
position = Vector2( 28.1078, 532.409 )
scale = Vector2( 2, 2 )
z_index = 3
frames = SubResource( 272 )
animation = "main"
frame = 1
playing = true

[node name="Sprite2" type="Sprite" parent="GUIStuff/timer/GUI"]
position = Vector2( 828.061, 539.136 )
scale = Vector2( 2, 2 )
z_index = 3
texture = ExtResource( 17 )

[node name="Hudban1" parent="GUIStuff/timer/GUI" instance=ExtResource( 34 )]
position = Vector2( 413.066, 33.6738 )
z_index = -1

[node name="Hudban2" parent="GUIStuff/timer/GUI" instance=ExtResource( 35 )]
position = Vector2( 397.351, 543.27 )
z_index = -1

[node name="scorecnt" type="Label" parent="GUIStuff/timer"]
anchor_left = 0.431893
anchor_top = -7.96327
anchor_right = 1.31739
anchor_bottom = -7.96327
margin_left = -265.156
margin_top = 344.408
margin_right = -264.156
margin_bottom = 360.408
rect_scale = Vector2( 0.5, 0.5 )
text = "af12rf"
align = 1
autowrap = true
max_lines_visible = 1
script = ExtResource( 15 )
__meta__ = {
"_edit_use_anchors_": true
}

[node name="Camera2D" type="Camera2D" parent="."]
position = Vector2( -514.244, -269.886 )
anchor_mode = 0
current = true
process_mode = 0
limit_left = 0
limit_top = 1168
limit_right = 45119
limit_bottom = 3455
limit_smoothed = true
drag_margin_h_enabled = true
drag_margin_v_enabled = true
smoothing_enabled = true
smoothing_speed = 10.0
drag_margin_left = 0.49
drag_margin_top = 0.66
drag_margin_right = 0.64
drag_margin_bottom = 0.58
editor_draw_limits = true
editor_draw_drag_margin = true
script = ExtResource( 30 )

[node name="CanvasLayer" type="CanvasLayer" parent="Camera2D"]
layer = 128

[node name="pause" type="Control" parent="Camera2D/CanvasLayer"]
pause_mode = 2
visible = false
margin_right = 40.0
margin_bottom = 40.0
script = ExtResource( 2 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="pausebg" type="ColorRect" parent="Camera2D/CanvasLayer/pause"]
pause_mode = 2
anchor_right = 16.0
anchor_bottom = 12.2
margin_right = 319.0
margin_bottom = 90.0
color = Color( 0.0823529, 0, 0.243137, 0.611765 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="pausedtext" type="Label" parent="Camera2D/CanvasLayer/pause"]
margin_left = 320.0
margin_top = 192.0
margin_right = 640.0
margin_bottom = 256.0
theme = ExtResource( 16 )
text = "- Yo, Hold it! -"
align = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="CanvasLayer2" type="CanvasLayer" parent="Camera2D"]
layer = 41

[node name="GameoverSpr" type="Sprite" parent="Camera2D/CanvasLayer2"]
modulate = Color( 1, 1, 1, 0 )
material = SubResource( 273 )
position = Vector2( 479.889, 314.774 )
scale = Vector2( 4, 4 )
z_index = 173
texture = ExtResource( 25 )

[node name="GOAnimate" type="AnimationPlayer" parent="Camera2D/CanvasLayer2/GameoverSpr"]
anims/Gameoverend = SubResource( 274 )
anims/RESET = SubResource( 275 )
anims/gameover = SubResource( 276 )

[node name="nowFade" type="Timer" parent="Camera2D/CanvasLayer2/GameoverSpr"]
process_mode = 0
wait_time = 5.851
one_shot = true

[node name="crt" type="Sprite" parent="Camera2D/CanvasLayer2"]
modulate = Color( 1, 1, 1, 0.45098 )
material = SubResource( 277 )
position = Vector2( 483.347, 286.994 )
scale = Vector2( 1.51316, 1.60841 )
texture = ExtResource( 21 )

[node name="spline" type="Sprite" parent="Camera2D/CanvasLayer2"]
visible = false
modulate = Color( 1, 1, 1, 0.45098 )
material = SubResource( 279 )
position = Vector2( 483.347, 286.994 )
scale = Vector2( 1.51316, 1.60841 )
texture = ExtResource( 21 )

[node name="CanvasLayer3" type="CanvasLayer" parent="Camera2D"]
layer = 30

[node name="screenspr" type="Sprite" parent="Camera2D/CanvasLayer3"]
modulate = Color( 1, 1, 1, 0 )
material = SubResource( 280 )
position = Vector2( 490.95, 292.013 )
scale = Vector2( 2.64414, 1.8577 )
texture = ExtResource( 23 )

[node name="Blackscreen" type="AnimationPlayer" parent="Camera2D/CanvasLayer3/screenspr"]
playback_process_mode = 0
anims/Fadein = SubResource( 281 )
anims/Fadeout = SubResource( 282 )
anims/RESET = SubResource( 283 )

[node name="screensprO" type="Sprite" parent="Camera2D/CanvasLayer3"]
modulate = Color( 1, 1, 1, 0.905882 )
material = SubResource( 284 )
position = Vector2( 481.489, 291.099 )
scale = Vector2( 1.62608, 1.79239 )
z_index = 2
z_as_relative = false
texture = ExtResource( 21 )

[node name="ColorRect" type="Sprite" parent="Camera2D/CanvasLayer3"]
visible = false
material = SubResource( 285 )
position = Vector2( 476, 292 )
scale = Vector2( 1.5125, 1.62222 )
z_index = 2
texture = ExtResource( 21 )
script = ExtResource( 14 )

[node name="ColorRect2" type="Sprite" parent="Camera2D/CanvasLayer3"]
visible = false
material = SubResource( 286 )
position = Vector2( 479.568, 288.254 )
scale = Vector2( 1.50135, 1.60141 )
z_index = 2
texture = ExtResource( 21 )
script = ExtResource( 14 )

[node name="CanvasLayer4" type="CanvasLayer" parent="Camera2D"]
layer = 112

[node name="CG" type="AnimatedSprite" parent="Camera2D"]
visible = false
position = Vector2( 475.866, 285.585 )
z_index = 230
frames = SubResource( 287 )
animation = "YaibaInt1"
playing = true
centered = false

[node name="noleavetilldone" type="KinematicBody2D" parent="Camera2D"]
position = Vector2( 519.051, 273.936 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="Camera2D/noleavetilldone"]
position = Vector2( -32, -272 )
shape = SubResource( 288 )

[node name="CollisionShape2D2" type="CollisionShape2D" parent="Camera2D/noleavetilldone"]
position = Vector2( -516, 12 )
shape = SubResource( 289 )

[node name="CollisionShape2D3" type="CollisionShape2D" parent="Camera2D/noleavetilldone"]
position = Vector2( 440, 8 )
shape = SubResource( 289 )

[node name="Rspr" type="AnimatedSprite" parent="."]
material = SubResource( 290 )
position = Vector2( 8.264, 2.806 )
scale = Vector2( 2, 2 )
frames = ExtResource( 31 )
animation = "idle"
frame = 9
playing = true

[node name="LightOccluder2D" type="LightOccluder2D" parent="Rspr"]
visible = false
occluder = SubResource( 291 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
visible = false
position = Vector2( -0.396851, 10.3181 )
shape = SubResource( 292 )

[node name="atkwait" type="Timer" parent="."]
wait_time = 0.127
one_shot = true

[node name="atktimer" type="Timer" parent="."]
wait_time = 0.382

[node name="gtimer" type="Timer" parent="."]
wait_time = 0.019
autostart = true

[node name="groundatk" type="Area2D" parent="." groups=["hit1"]]
scale = Vector2( 1.84, 1 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="groundatk"]
position = Vector2( 43.779, 10.574 )
scale = Vector2( 0.244993, 0.80688 )
shape = SubResource( 293 )

[node name="airatk" type="Area2D" parent="." groups=["airhit"]]
visible = false
position = Vector2( 0, -7.99998 )
scale = Vector2( 1.32, 1.24 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="airatk"]
position = Vector2( -1.52588e-05, 6.45161 )
shape = SubResource( 294 )

[node name="dashatkvoice" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 24 )
volume_db = -5.0
bus = "Voices"

[node name="Voices" type="Node2D" parent="."]
visible = false

[node name="dodgeVoices" type="AudioStreamPlayer" parent="Voices"]
stream = ExtResource( 11 )
volume_db = -3.342
bus = "Voices"

[node name="AP1" type="AudioStreamPlayer" parent="Voices"]
stream = ExtResource( 7 )
volume_db = 0.168
bus = "Voices"

[node name="AP2" type="AudioStreamPlayer" parent="Voices"]
stream = ExtResource( 6 )
volume_db = 0.814
bus = "Voices"

[node name="AP3" type="AudioStreamPlayer" parent="Voices"]
stream = ExtResource( 10 )
volume_db = -0.478
bus = "Voices"

[node name="AP4" type="AudioStreamPlayer" parent="Voices"]
stream = ExtResource( 5 )
volume_db = 0.813
bus = "Voices"

[node name="DAM1" type="AudioStreamPlayer" parent="Voices"]
stream = ExtResource( 9 )
volume_db = -1.124
bus = "Voices"

[node name="DAM2" type="AudioStreamPlayer" parent="Voices"]
stream = ExtResource( 8 )
volume_db = 0.168
bus = "Voices"

[node name="DAM3" type="AudioStreamPlayer" parent="Voices"]
stream = ExtResource( 3 )
volume_db = -5.0
bus = "Voices"

[node name="snapoff" type="Timer" parent="."]
wait_time = 0.041
one_shot = true

[node name="attack3hit" type="Area2D" parent="." groups=["hit3"]]
visible = false

[node name="CollisionShape2D" type="CollisionShape2D" parent="attack3hit"]
position = Vector2( 28, -4 )
shape = SubResource( 295 )

[node name="groundatk2" type="Area2D" parent="." groups=["hit2"]]
position = Vector2( 20.807, 4.05005 )
scale = Vector2( 1.84, 1 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="groundatk2"]
position = Vector2( 32, 9 )
shape = SubResource( 296 )

[node name="atkwait2" type="Timer" parent="."]
wait_time = 0.062
one_shot = true

[node name="killhitbox2" type="Timer" parent="."]
wait_time = 0.085
one_shot = true

[node name="Hurtbox" type="Area2D" parent="." groups=["hurtbox"]]
visible = false
position = Vector2( -176, 16 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="Hurtbox"]
position = Vector2( 180.699, -12.825 )
shape = SubResource( 297 )

[node name="safe_frames" type="Timer" parent="Hurtbox"]
process_mode = 0
wait_time = 0.687
one_shot = true

[node name="dodge_window" type="Timer" parent="Hurtbox"]
process_mode = 0
wait_time = 0.061
one_shot = true

[node name="StageMusic" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 36 )
volume_db = 0.963
autoplay = true
bus = "BGM"

[node name="musichandler" type="AnimationPlayer" parent="StageMusic"]
anims/RESET = SubResource( 298 )
anims/fadein = SubResource( 299 )
anims/fadeout = SubResource( 300 )

[node name="dsound" type="AudioStreamPlayer" parent="."]
volume_db = -6.46
bus = "SFX"

[node name="dashtimer" type="Timer" parent="."]
process_mode = 0
wait_time = 0.785
one_shot = true

[node name="damagepause" type="Timer" parent="."]
wait_time = 0.246
one_shot = true

[node name="collect" type="AudioStreamPlayer2D" parent="."]
position = Vector2( 8.264, -0.571728 )
stream = ExtResource( 4 )
volume_db = 0.031

[node name="Deathwait" type="Timer" parent="."]
process_mode = 0
wait_time = 1.96
one_shot = true

[node name="Gameover" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 26 )
volume_db = -5.745
bus = "BGM"

[node name="Chain" parent="." instance=ExtResource( 33 )]
position = Vector2( 0, -276.623 )

[node name="zoomtime" type="Timer" parent="."]
one_shot = true

[node name="Zoombox" type="Area2D" parent="." groups=["BIGDAMAGE"]]

[node name="CollisionShape2D" type="CollisionShape2D" parent="Zoombox"]
position = Vector2( 0.179, 28.893 )
rotation = 1.5708
shape = SubResource( 301 )

[node name="otvoice" type="AudioStreamPlayer" parent="."]
volume_db = -8.688
bus = "Overlappingvoices"

[node name="Node" type="Node" parent="."]

[connection signal="animation_finished" from="Camera2D/CanvasLayer2/GameoverSpr/GOAnimate" to="." method="_on_GOAnimate_animation_finished"]
[connection signal="timeout" from="Camera2D/CanvasLayer2/GameoverSpr/nowFade" to="." method="_on_nowFade_timeout"]
[connection signal="animation_finished" from="Rspr" to="." method="_on_Rspr_animation_finished"]
[connection signal="timeout" from="atkwait" to="." method="_on_atkwait_timeout"]
[connection signal="timeout" from="atktimer" to="." method="_on_atktimer_timeout"]
[connection signal="timeout" from="gtimer" to="." method="_on_gtimer_timeout"]
[connection signal="finished" from="dashatkvoice" to="." method="_on_dashatkvoice_finished"]
[connection signal="timeout" from="atkwait2" to="." method="_on_atkwait2_timeout"]
[connection signal="timeout" from="killhitbox2" to="." method="_on_killhitbox2_timeout"]
[connection signal="area_entered" from="Hurtbox" to="." method="_on_Hurtbox_area_entered"]
[connection signal="timeout" from="damagepause" to="." method="_on_damagepause_timeout"]
[connection signal="timeout" from="Deathwait" to="." method="_on_Deathwait_timeout"]
[connection signal="timeout" from="zoomtime" to="." method="_on_zoomtime_timeout"]
